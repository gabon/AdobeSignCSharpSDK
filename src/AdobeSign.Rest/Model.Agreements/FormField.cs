/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AdobeSign.Rest.Model.Agreements
{
    /// <summary>
    /// A form field for an agreement.
    /// </summary>
    [DataContract]
    public partial class FormField :  IEquatable<FormField>, IValidatableObject
    {
        /// <summary>
        /// Alignment of the text.
        /// </summary>
        /// <value>Alignment of the text.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlignmentEnum
        {
            
            /// <summary>
            /// Enum LEFT for value: LEFT
            /// </summary>
            [EnumMember(Value = "LEFT")]
            LEFT = 1,
            
            /// <summary>
            /// Enum RIGHT for value: RIGHT
            /// </summary>
            [EnumMember(Value = "RIGHT")]
            RIGHT = 2,
            
            /// <summary>
            /// Enum CENTER for value: CENTER
            /// </summary>
            [EnumMember(Value = "CENTER")]
            CENTER = 3
        }

        /// <summary>
        /// Alignment of the text.
        /// </summary>
        /// <value>Alignment of the text.</value>
        [DataMember(Name="alignment", EmitDefaultValue=false)]
        public AlignmentEnum? Alignment { get; set; }
        /// <summary>
        /// Style of the border of the field.
        /// </summary>
        /// <value>Style of the border of the field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BorderStyleEnum
        {
            
            /// <summary>
            /// Enum SOLID for value: SOLID
            /// </summary>
            [EnumMember(Value = "SOLID")]
            SOLID = 1,
            
            /// <summary>
            /// Enum DASHED for value: DASHED
            /// </summary>
            [EnumMember(Value = "DASHED")]
            DASHED = 2,
            
            /// <summary>
            /// Enum BEVELED for value: BEVELED
            /// </summary>
            [EnumMember(Value = "BEVELED")]
            BEVELED = 3,
            
            /// <summary>
            /// Enum INSET for value: INSET
            /// </summary>
            [EnumMember(Value = "INSET")]
            INSET = 4,
            
            /// <summary>
            /// Enum UNDERLINE for value: UNDERLINE
            /// </summary>
            [EnumMember(Value = "UNDERLINE")]
            UNDERLINE = 5
        }

        /// <summary>
        /// Style of the border of the field.
        /// </summary>
        /// <value>Style of the border of the field.</value>
        [DataMember(Name="borderStyle", EmitDefaultValue=false)]
        public BorderStyleEnum? BorderStyle { get; set; }
        /// <summary>
        /// Content Type of the form field.
        /// </summary>
        /// <value>Content Type of the form field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentTypeEnum
        {
            
            /// <summary>
            /// Enum DATA for value: DATA
            /// </summary>
            [EnumMember(Value = "DATA")]
            DATA = 1,
            
            /// <summary>
            /// Enum SIGNATUREBLOCK for value: SIGNATURE_BLOCK
            /// </summary>
            [EnumMember(Value = "SIGNATURE_BLOCK")]
            SIGNATUREBLOCK = 2,
            
            /// <summary>
            /// Enum SIGNATURE for value: SIGNATURE
            /// </summary>
            [EnumMember(Value = "SIGNATURE")]
            SIGNATURE = 3,
            
            /// <summary>
            /// Enum SIGNERNAME for value: SIGNER_NAME
            /// </summary>
            [EnumMember(Value = "SIGNER_NAME")]
            SIGNERNAME = 4,
            
            /// <summary>
            /// Enum SIGNERFIRSTNAME for value: SIGNER_FIRST_NAME
            /// </summary>
            [EnumMember(Value = "SIGNER_FIRST_NAME")]
            SIGNERFIRSTNAME = 5,
            
            /// <summary>
            /// Enum SIGNERLASTNAME for value: SIGNER_LAST_NAME
            /// </summary>
            [EnumMember(Value = "SIGNER_LAST_NAME")]
            SIGNERLASTNAME = 6,
            
            /// <summary>
            /// Enum SIGNERINITIALS for value: SIGNER_INITIALS
            /// </summary>
            [EnumMember(Value = "SIGNER_INITIALS")]
            SIGNERINITIALS = 7,
            
            /// <summary>
            /// Enum SIGNEREMAIL for value: SIGNER_EMAIL
            /// </summary>
            [EnumMember(Value = "SIGNER_EMAIL")]
            SIGNEREMAIL = 8,
            
            /// <summary>
            /// Enum SIGNERTITLE for value: SIGNER_TITLE
            /// </summary>
            [EnumMember(Value = "SIGNER_TITLE")]
            SIGNERTITLE = 9,
            
            /// <summary>
            /// Enum SIGNERCOMPANY for value: SIGNER_COMPANY
            /// </summary>
            [EnumMember(Value = "SIGNER_COMPANY")]
            SIGNERCOMPANY = 10,
            
            /// <summary>
            /// Enum SIGNATUREDATE for value: SIGNATURE_DATE
            /// </summary>
            [EnumMember(Value = "SIGNATURE_DATE")]
            SIGNATUREDATE = 11,
            
            /// <summary>
            /// Enum AGREEMENTNAME for value: AGREEMENT_NAME
            /// </summary>
            [EnumMember(Value = "AGREEMENT_NAME")]
            AGREEMENTNAME = 12,
            
            /// <summary>
            /// Enum AGREEMENTMESSAGE for value: AGREEMENT_MESSAGE
            /// </summary>
            [EnumMember(Value = "AGREEMENT_MESSAGE")]
            AGREEMENTMESSAGE = 13,
            
            /// <summary>
            /// Enum TRANSACTIONID for value: TRANSACTION_ID
            /// </summary>
            [EnumMember(Value = "TRANSACTION_ID")]
            TRANSACTIONID = 14,
            
            /// <summary>
            /// Enum SIGNATURESTAMP for value: SIGNATURE_STAMP
            /// </summary>
            [EnumMember(Value = "SIGNATURE_STAMP")]
            SIGNATURESTAMP = 15,
            
            /// <summary>
            /// Enum PAYMENT for value: PAYMENT
            /// </summary>
            [EnumMember(Value = "PAYMENT")]
            PAYMENT = 16,
            
            /// <summary>
            /// Enum DIGITALSIGNATURE for value: DIGITAL_SIGNATURE
            /// </summary>
            [EnumMember(Value = "DIGITAL_SIGNATURE")]
            DIGITALSIGNATURE = 17
        }

        /// <summary>
        /// Content Type of the form field.
        /// </summary>
        /// <value>Content Type of the form field.</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public ContentTypeEnum? ContentType { get; set; }
        /// <summary>
        /// Format type of the text field.
        /// </summary>
        /// <value>Format type of the text field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisplayFormatTypeEnum
        {
            
            /// <summary>
            /// Enum DEFAULT for value: DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT = 1,
            
            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATE = 2,
            
            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 3
        }

        /// <summary>
        /// Format type of the text field.
        /// </summary>
        /// <value>Format type of the text field.</value>
        [DataMember(Name="displayFormatType", EmitDefaultValue=false)]
        public DisplayFormatTypeEnum? DisplayFormatType { get; set; }
        /// <summary>
        /// Input type of the form field
        /// </summary>
        /// <value>Input type of the form field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InputTypeEnum
        {
            
            /// <summary>
            /// Enum TEXTFIELD for value: TEXT_FIELD
            /// </summary>
            [EnumMember(Value = "TEXT_FIELD")]
            TEXTFIELD = 1,
            
            /// <summary>
            /// Enum MULTILINE for value: MULTILINE
            /// </summary>
            [EnumMember(Value = "MULTILINE")]
            MULTILINE = 2,
            
            /// <summary>
            /// Enum PASSWORD for value: PASSWORD
            /// </summary>
            [EnumMember(Value = "PASSWORD")]
            PASSWORD = 3,
            
            /// <summary>
            /// Enum RADIO for value: RADIO
            /// </summary>
            [EnumMember(Value = "RADIO")]
            RADIO = 4,
            
            /// <summary>
            /// Enum CHECKBOX for value: CHECKBOX
            /// </summary>
            [EnumMember(Value = "CHECKBOX")]
            CHECKBOX = 5,
            
            /// <summary>
            /// Enum DROPDOWN for value: DROP_DOWN
            /// </summary>
            [EnumMember(Value = "DROP_DOWN")]
            DROPDOWN = 6,
            
            /// <summary>
            /// Enum LISTBOX for value: LISTBOX
            /// </summary>
            [EnumMember(Value = "LISTBOX")]
            LISTBOX = 7,
            
            /// <summary>
            /// Enum SIGNATURE for value: SIGNATURE
            /// </summary>
            [EnumMember(Value = "SIGNATURE")]
            SIGNATURE = 8,
            
            /// <summary>
            /// Enum PDFSIGNATURE for value: PDF_SIGNATURE
            /// </summary>
            [EnumMember(Value = "PDF_SIGNATURE")]
            PDFSIGNATURE = 9,
            
            /// <summary>
            /// Enum BUTTON for value: BUTTON
            /// </summary>
            [EnumMember(Value = "BUTTON")]
            BUTTON = 10,
            
            /// <summary>
            /// Enum BLOCK for value: BLOCK
            /// </summary>
            [EnumMember(Value = "BLOCK")]
            BLOCK = 11,
            
            /// <summary>
            /// Enum FILECHOOSER for value: FILE_CHOOSER
            /// </summary>
            [EnumMember(Value = "FILE_CHOOSER")]
            FILECHOOSER = 12,
            
            /// <summary>
            /// Enum COMB for value: COMB
            /// </summary>
            [EnumMember(Value = "COMB")]
            COMB = 13,
            
            /// <summary>
            /// Enum INLINEIMAGE for value: INLINE_IMAGE
            /// </summary>
            [EnumMember(Value = "INLINE_IMAGE")]
            INLINEIMAGE = 14,
            
            /// <summary>
            /// Enum UNSUPPORTED for value: UNSUPPORTED
            /// </summary>
            [EnumMember(Value = "UNSUPPORTED")]
            UNSUPPORTED = 15
        }

        /// <summary>
        /// Input type of the form field
        /// </summary>
        /// <value>Input type of the form field</value>
        [DataMember(Name="inputType", EmitDefaultValue=false)]
        public InputTypeEnum? InputType { get; set; }
        /// <summary>
        /// Origin of Form Field
        /// </summary>
        /// <value>Origin of Form Field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OriginEnum
        {
            
            /// <summary>
            /// Enum AUTHORED for value: AUTHORED
            /// </summary>
            [EnumMember(Value = "AUTHORED")]
            AUTHORED = 1,
            
            /// <summary>
            /// Enum GENERATED for value: GENERATED
            /// </summary>
            [EnumMember(Value = "GENERATED")]
            GENERATED = 2,
            
            /// <summary>
            /// Enum IMPORTED for value: IMPORTED
            /// </summary>
            [EnumMember(Value = "IMPORTED")]
            IMPORTED = 3
        }

        /// <summary>
        /// Origin of Form Field
        /// </summary>
        /// <value>Origin of Form Field</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// The type of radio button (if field is radio button, identified by inputType).
        /// </summary>
        /// <value>The type of radio button (if field is radio button, identified by inputType).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RadioCheckTypeEnum
        {
            
            /// <summary>
            /// Enum CIRCLE for value: CIRCLE
            /// </summary>
            [EnumMember(Value = "CIRCLE")]
            CIRCLE = 1,
            
            /// <summary>
            /// Enum CHECK for value: CHECK
            /// </summary>
            [EnumMember(Value = "CHECK")]
            CHECK = 2,
            
            /// <summary>
            /// Enum CROSS for value: CROSS
            /// </summary>
            [EnumMember(Value = "CROSS")]
            CROSS = 3,
            
            /// <summary>
            /// Enum DIAMOND for value: DIAMOND
            /// </summary>
            [EnumMember(Value = "DIAMOND")]
            DIAMOND = 4,
            
            /// <summary>
            /// Enum SQUARE for value: SQUARE
            /// </summary>
            [EnumMember(Value = "SQUARE")]
            SQUARE = 5,
            
            /// <summary>
            /// Enum STAR for value: STAR
            /// </summary>
            [EnumMember(Value = "STAR")]
            STAR = 6
        }

        /// <summary>
        /// The type of radio button (if field is radio button, identified by inputType).
        /// </summary>
        /// <value>The type of radio button (if field is radio button, identified by inputType).</value>
        [DataMember(Name="radioCheckType", EmitDefaultValue=false)]
        public RadioCheckTypeEnum? RadioCheckType { get; set; }
        /// <summary>
        /// Rule for validating the field value.
        /// </summary>
        /// <value>Rule for validating the field value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidationEnum
        {
            
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,
            
            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 2,
            
            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 3,
            
            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATE = 4,
            
            /// <summary>
            /// Enum DATECUSTOM for value: DATE_CUSTOM
            /// </summary>
            [EnumMember(Value = "DATE_CUSTOM")]
            DATECUSTOM = 5,
            
            /// <summary>
            /// Enum TIME for value: TIME
            /// </summary>
            [EnumMember(Value = "TIME")]
            TIME = 6,
            
            /// <summary>
            /// Enum ZIP for value: ZIP
            /// </summary>
            [EnumMember(Value = "ZIP")]
            ZIP = 7,
            
            /// <summary>
            /// Enum PHONE for value: PHONE
            /// </summary>
            [EnumMember(Value = "PHONE")]
            PHONE = 8,
            
            /// <summary>
            /// Enum SOCIALSEC for value: SOCIAL_SEC
            /// </summary>
            [EnumMember(Value = "SOCIAL_SEC")]
            SOCIALSEC = 9,
            
            /// <summary>
            /// Enum EMAIL for value: EMAIL
            /// </summary>
            [EnumMember(Value = "EMAIL")]
            EMAIL = 10,
            
            /// <summary>
            /// Enum CURRENCY for value: CURRENCY
            /// </summary>
            [EnumMember(Value = "CURRENCY")]
            CURRENCY = 11,
            
            /// <summary>
            /// Enum PERCENT for value: PERCENT
            /// </summary>
            [EnumMember(Value = "PERCENT")]
            PERCENT = 12,
            
            /// <summary>
            /// Enum FORMULA for value: FORMULA
            /// </summary>
            [EnumMember(Value = "FORMULA")]
            FORMULA = 13,
            
            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 14,
            
            /// <summary>
            /// Enum XFAPICTURE for value: XFA_PICTURE
            /// </summary>
            [EnumMember(Value = "XFA_PICTURE")]
            XFAPICTURE = 15
        }

        /// <summary>
        /// Rule for validating the field value.
        /// </summary>
        /// <value>Rule for validating the field value.</value>
        [DataMember(Name="validation", EmitDefaultValue=false)]
        public ValidationEnum? Validation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormField" /> class.
        /// </summary>
        /// <param name="Alignment">Alignment of the text..</param>
        /// <param name="Assignee">Who the field is assigned to.  Either a participant set id, null, NOBODY or PREFILL..</param>
        /// <param name="BackgroundColor">Background color of the form field in RGB or HEX format.</param>
        /// <param name="BorderColor">Color of the border of the field in RGB or HEX format.</param>
        /// <param name="BorderStyle">Style of the border of the field..</param>
        /// <param name="BorderWidth">Width of the border of the field in pixels.</param>
        /// <param name="Calculated">true if this field&#39;s value is calculated from an expression, else false.</param>
        /// <param name="ConditionalAction">A predicate (or set of predicates) that determines whether this field is visible and enabled..</param>
        /// <param name="ContentType">Content Type of the form field..</param>
        /// <param name="DefaultValue">Default value of the form field.</param>
        /// <param name="DisplayFormat">Format of the value of the field to be displayed based on the displayFormatType property..</param>
        /// <param name="DisplayFormatType">Format type of the text field..</param>
        /// <param name="DisplayLabel">Display label attached to the field.</param>
        /// <param name="FontColor">Font color of the form field in RGB or HEX format.</param>
        /// <param name="FontName">Font name of the form field.</param>
        /// <param name="FontSize">Font size of the form field in points.</param>
        /// <param name="HiddenOptions">Text values which are hidden in a drop down form field.</param>
        /// <param name="Hyperlink">Hyperlink-specific data (e.g. as url, link type).</param>
        /// <param name="InputType">Input type of the form field.</param>
        /// <param name="Locations">All locations in a document where the form field is placed.</param>
        /// <param name="Masked">true if the input entered by the signer has to be masked (like password), false if it shouldn&#39;t be.</param>
        /// <param name="MaskingText">Text to mask the masked form field.</param>
        /// <param name="MaxLength">Maximum length of the input text field in terms of no. of characters.</param>
        /// <param name="MaxValue">Upper bound of the number that can be entered by the signer.</param>
        /// <param name="MinLength">Minimum length of the input text field in terms of no. of characters.</param>
        /// <param name="MinValue">Lower bound of the number that can be entered by the signer.</param>
        /// <param name="Name">The name of the form field.</param>
        /// <param name="Origin">Origin of Form Field.</param>
        /// <param name="RadioCheckType">The type of radio button (if field is radio button, identified by inputType)..</param>
        /// <param name="_ReadOnly">true if it is a read-only field, else false.</param>
        /// <param name="Required">true if it is a mandatory field to be filled by the signer, else false.</param>
        /// <param name="Tooltip">Text that appears while hovering over the field.</param>
        /// <param name="UrlOverridable">For widget text fields only - true if the default value may come from the URL, else false.</param>
        /// <param name="Validation">Rule for validating the field value..</param>
        /// <param name="ValidationData">Further data for validating input with regards to the field&#39;s specified format. The contents and interpretation of formatData depends on the value of validation..</param>
        /// <param name="ValidationErrMsg">Error message to be shown to the signer if filled value doesn&#39;t match the validations of the form field.</param>
        /// <param name="ValueExpression">Expression to calculate value of the form field.</param>
        /// <param name="Visible">If set to false, then the form field is hidden.  Otherwise, it is visible..</param>
        /// <param name="VisibleOptions">Text values which are visible in a drop down form field.</param>
        public FormField(AlignmentEnum? Alignment = default(AlignmentEnum?), string Assignee = default(string), string BackgroundColor = default(string), string BorderColor = default(string), BorderStyleEnum? BorderStyle = default(BorderStyleEnum?), double? BorderWidth = default(double?), bool? Calculated = default(bool?), FormFieldConditionalAction ConditionalAction = default(FormFieldConditionalAction), ContentTypeEnum? ContentType = default(ContentTypeEnum?), string DefaultValue = default(string), string DisplayFormat = default(string), DisplayFormatTypeEnum? DisplayFormatType = default(DisplayFormatTypeEnum?), string DisplayLabel = default(string), string FontColor = default(string), string FontName = default(string), double? FontSize = default(double?), List<string> HiddenOptions = default(List<string>), FormFieldHyperlink Hyperlink = default(FormFieldHyperlink), InputTypeEnum? InputType = default(InputTypeEnum?), List<FormFieldLocation> Locations = default(List<FormFieldLocation>), bool? Masked = default(bool?), string MaskingText = default(string), int? MaxLength = default(int?), double? MaxValue = default(double?), int? MinLength = default(int?), double? MinValue = default(double?), string Name = default(string), OriginEnum? Origin = default(OriginEnum?), RadioCheckTypeEnum? RadioCheckType = default(RadioCheckTypeEnum?), bool? _ReadOnly = default(bool?), bool? Required = default(bool?), string Tooltip = default(string), bool? UrlOverridable = default(bool?), ValidationEnum? Validation = default(ValidationEnum?), string ValidationData = default(string), string ValidationErrMsg = default(string), string ValueExpression = default(string), bool? Visible = default(bool?), List<string> VisibleOptions = default(List<string>))
        {
            this.Alignment = Alignment;
            this.Assignee = Assignee;
            this.BackgroundColor = BackgroundColor;
            this.BorderColor = BorderColor;
            this.BorderStyle = BorderStyle;
            this.BorderWidth = BorderWidth;
            this.Calculated = Calculated;
            this.ConditionalAction = ConditionalAction;
            this.ContentType = ContentType;
            this.DefaultValue = DefaultValue;
            this.DisplayFormat = DisplayFormat;
            this.DisplayFormatType = DisplayFormatType;
            this.DisplayLabel = DisplayLabel;
            this.FontColor = FontColor;
            this.FontName = FontName;
            this.FontSize = FontSize;
            this.HiddenOptions = HiddenOptions;
            this.Hyperlink = Hyperlink;
            this.InputType = InputType;
            this.Locations = Locations;
            this.Masked = Masked;
            this.MaskingText = MaskingText;
            this.MaxLength = MaxLength;
            this.MaxValue = MaxValue;
            this.MinLength = MinLength;
            this.MinValue = MinValue;
            this.Name = Name;
            this.Origin = Origin;
            this.RadioCheckType = RadioCheckType;
            this._ReadOnly = _ReadOnly;
            this.Required = Required;
            this.Tooltip = Tooltip;
            this.UrlOverridable = UrlOverridable;
            this.Validation = Validation;
            this.ValidationData = ValidationData;
            this.ValidationErrMsg = ValidationErrMsg;
            this.ValueExpression = ValueExpression;
            this.Visible = Visible;
            this.VisibleOptions = VisibleOptions;
        }
        

        /// <summary>
        /// Who the field is assigned to.  Either a participant set id, null, NOBODY or PREFILL.
        /// </summary>
        /// <value>Who the field is assigned to.  Either a participant set id, null, NOBODY or PREFILL.</value>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public string Assignee { get; set; }

        /// <summary>
        /// Background color of the form field in RGB or HEX format
        /// </summary>
        /// <value>Background color of the form field in RGB or HEX format</value>
        [DataMember(Name="backgroundColor", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Color of the border of the field in RGB or HEX format
        /// </summary>
        /// <value>Color of the border of the field in RGB or HEX format</value>
        [DataMember(Name="borderColor", EmitDefaultValue=false)]
        public string BorderColor { get; set; }


        /// <summary>
        /// Width of the border of the field in pixels
        /// </summary>
        /// <value>Width of the border of the field in pixels</value>
        [DataMember(Name="borderWidth", EmitDefaultValue=false)]
        public double? BorderWidth { get; set; }

        /// <summary>
        /// true if this field&#39;s value is calculated from an expression, else false
        /// </summary>
        /// <value>true if this field&#39;s value is calculated from an expression, else false</value>
        [DataMember(Name="calculated", EmitDefaultValue=false)]
        public bool? Calculated { get; set; }

        /// <summary>
        /// A predicate (or set of predicates) that determines whether this field is visible and enabled.
        /// </summary>
        /// <value>A predicate (or set of predicates) that determines whether this field is visible and enabled.</value>
        [DataMember(Name="conditionalAction", EmitDefaultValue=false)]
        public FormFieldConditionalAction ConditionalAction { get; set; }


        /// <summary>
        /// Default value of the form field
        /// </summary>
        /// <value>Default value of the form field</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Format of the value of the field to be displayed based on the displayFormatType property.
        /// </summary>
        /// <value>Format of the value of the field to be displayed based on the displayFormatType property.</value>
        [DataMember(Name="displayFormat", EmitDefaultValue=false)]
        public string DisplayFormat { get; set; }


        /// <summary>
        /// Display label attached to the field
        /// </summary>
        /// <value>Display label attached to the field</value>
        [DataMember(Name="displayLabel", EmitDefaultValue=false)]
        public string DisplayLabel { get; set; }

        /// <summary>
        /// Font color of the form field in RGB or HEX format
        /// </summary>
        /// <value>Font color of the form field in RGB or HEX format</value>
        [DataMember(Name="fontColor", EmitDefaultValue=false)]
        public string FontColor { get; set; }

        /// <summary>
        /// Font name of the form field
        /// </summary>
        /// <value>Font name of the form field</value>
        [DataMember(Name="fontName", EmitDefaultValue=false)]
        public string FontName { get; set; }

        /// <summary>
        /// Font size of the form field in points
        /// </summary>
        /// <value>Font size of the form field in points</value>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public double? FontSize { get; set; }

        /// <summary>
        /// Text values which are hidden in a drop down form field
        /// </summary>
        /// <value>Text values which are hidden in a drop down form field</value>
        [DataMember(Name="hiddenOptions", EmitDefaultValue=false)]
        public List<string> HiddenOptions { get; set; }

        /// <summary>
        /// Hyperlink-specific data (e.g. as url, link type)
        /// </summary>
        /// <value>Hyperlink-specific data (e.g. as url, link type)</value>
        [DataMember(Name="hyperlink", EmitDefaultValue=false)]
        public FormFieldHyperlink Hyperlink { get; set; }


        /// <summary>
        /// All locations in a document where the form field is placed
        /// </summary>
        /// <value>All locations in a document where the form field is placed</value>
        [DataMember(Name="locations", EmitDefaultValue=false)]
        public List<FormFieldLocation> Locations { get; set; }

        /// <summary>
        /// true if the input entered by the signer has to be masked (like password), false if it shouldn&#39;t be
        /// </summary>
        /// <value>true if the input entered by the signer has to be masked (like password), false if it shouldn&#39;t be</value>
        [DataMember(Name="masked", EmitDefaultValue=false)]
        public bool? Masked { get; set; }

        /// <summary>
        /// Text to mask the masked form field
        /// </summary>
        /// <value>Text to mask the masked form field</value>
        [DataMember(Name="maskingText", EmitDefaultValue=false)]
        public string MaskingText { get; set; }

        /// <summary>
        /// Maximum length of the input text field in terms of no. of characters
        /// </summary>
        /// <value>Maximum length of the input text field in terms of no. of characters</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Upper bound of the number that can be entered by the signer
        /// </summary>
        /// <value>Upper bound of the number that can be entered by the signer</value>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public double? MaxValue { get; set; }

        /// <summary>
        /// Minimum length of the input text field in terms of no. of characters
        /// </summary>
        /// <value>Minimum length of the input text field in terms of no. of characters</value>
        [DataMember(Name="minLength", EmitDefaultValue=false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Lower bound of the number that can be entered by the signer
        /// </summary>
        /// <value>Lower bound of the number that can be entered by the signer</value>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public double? MinValue { get; set; }

        /// <summary>
        /// The name of the form field
        /// </summary>
        /// <value>The name of the form field</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// true if it is a read-only field, else false
        /// </summary>
        /// <value>true if it is a read-only field, else false</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; set; }

        /// <summary>
        /// true if it is a mandatory field to be filled by the signer, else false
        /// </summary>
        /// <value>true if it is a mandatory field to be filled by the signer, else false</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Text that appears while hovering over the field
        /// </summary>
        /// <value>Text that appears while hovering over the field</value>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }

        /// <summary>
        /// For widget text fields only - true if the default value may come from the URL, else false
        /// </summary>
        /// <value>For widget text fields only - true if the default value may come from the URL, else false</value>
        [DataMember(Name="urlOverridable", EmitDefaultValue=false)]
        public bool? UrlOverridable { get; set; }


        /// <summary>
        /// Further data for validating input with regards to the field&#39;s specified format. The contents and interpretation of formatData depends on the value of validation.
        /// </summary>
        /// <value>Further data for validating input with regards to the field&#39;s specified format. The contents and interpretation of formatData depends on the value of validation.</value>
        [DataMember(Name="validationData", EmitDefaultValue=false)]
        public string ValidationData { get; set; }

        /// <summary>
        /// Error message to be shown to the signer if filled value doesn&#39;t match the validations of the form field
        /// </summary>
        /// <value>Error message to be shown to the signer if filled value doesn&#39;t match the validations of the form field</value>
        [DataMember(Name="validationErrMsg", EmitDefaultValue=false)]
        public string ValidationErrMsg { get; set; }

        /// <summary>
        /// Expression to calculate value of the form field
        /// </summary>
        /// <value>Expression to calculate value of the form field</value>
        [DataMember(Name="valueExpression", EmitDefaultValue=false)]
        public string ValueExpression { get; set; }

        /// <summary>
        /// If set to false, then the form field is hidden.  Otherwise, it is visible.
        /// </summary>
        /// <value>If set to false, then the form field is hidden.  Otherwise, it is visible.</value>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Text values which are visible in a drop down form field
        /// </summary>
        /// <value>Text values which are visible in a drop down form field</value>
        [DataMember(Name="visibleOptions", EmitDefaultValue=false)]
        public List<string> VisibleOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormField {\n");
            sb.Append("  Alignment: ").Append(Alignment).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  BorderStyle: ").Append(BorderStyle).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("  Calculated: ").Append(Calculated).Append("\n");
            sb.Append("  ConditionalAction: ").Append(ConditionalAction).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  DisplayFormat: ").Append(DisplayFormat).Append("\n");
            sb.Append("  DisplayFormatType: ").Append(DisplayFormatType).Append("\n");
            sb.Append("  DisplayLabel: ").Append(DisplayLabel).Append("\n");
            sb.Append("  FontColor: ").Append(FontColor).Append("\n");
            sb.Append("  FontName: ").Append(FontName).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  HiddenOptions: ").Append(HiddenOptions).Append("\n");
            sb.Append("  Hyperlink: ").Append(Hyperlink).Append("\n");
            sb.Append("  InputType: ").Append(InputType).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  Masked: ").Append(Masked).Append("\n");
            sb.Append("  MaskingText: ").Append(MaskingText).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  RadioCheckType: ").Append(RadioCheckType).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  UrlOverridable: ").Append(UrlOverridable).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  ValidationData: ").Append(ValidationData).Append("\n");
            sb.Append("  ValidationErrMsg: ").Append(ValidationErrMsg).Append("\n");
            sb.Append("  ValueExpression: ").Append(ValueExpression).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  VisibleOptions: ").Append(VisibleOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormField);
        }

        /// <summary>
        /// Returns true if FormField instances are equal
        /// </summary>
        /// <param name="input">Instance of FormField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alignment == input.Alignment ||
                    (this.Alignment != null &&
                    this.Alignment.Equals(input.Alignment))
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.BorderColor == input.BorderColor ||
                    (this.BorderColor != null &&
                    this.BorderColor.Equals(input.BorderColor))
                ) && 
                (
                    this.BorderStyle == input.BorderStyle ||
                    (this.BorderStyle != null &&
                    this.BorderStyle.Equals(input.BorderStyle))
                ) && 
                (
                    this.BorderWidth == input.BorderWidth ||
                    (this.BorderWidth != null &&
                    this.BorderWidth.Equals(input.BorderWidth))
                ) && 
                (
                    this.Calculated == input.Calculated ||
                    (this.Calculated != null &&
                    this.Calculated.Equals(input.Calculated))
                ) && 
                (
                    this.ConditionalAction == input.ConditionalAction ||
                    (this.ConditionalAction != null &&
                    this.ConditionalAction.Equals(input.ConditionalAction))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.DisplayFormat == input.DisplayFormat ||
                    (this.DisplayFormat != null &&
                    this.DisplayFormat.Equals(input.DisplayFormat))
                ) && 
                (
                    this.DisplayFormatType == input.DisplayFormatType ||
                    (this.DisplayFormatType != null &&
                    this.DisplayFormatType.Equals(input.DisplayFormatType))
                ) && 
                (
                    this.DisplayLabel == input.DisplayLabel ||
                    (this.DisplayLabel != null &&
                    this.DisplayLabel.Equals(input.DisplayLabel))
                ) && 
                (
                    this.FontColor == input.FontColor ||
                    (this.FontColor != null &&
                    this.FontColor.Equals(input.FontColor))
                ) && 
                (
                    this.FontName == input.FontName ||
                    (this.FontName != null &&
                    this.FontName.Equals(input.FontName))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.HiddenOptions == input.HiddenOptions ||
                    this.HiddenOptions != null &&
                    this.HiddenOptions.SequenceEqual(input.HiddenOptions)
                ) && 
                (
                    this.Hyperlink == input.Hyperlink ||
                    (this.Hyperlink != null &&
                    this.Hyperlink.Equals(input.Hyperlink))
                ) && 
                (
                    this.InputType == input.InputType ||
                    (this.InputType != null &&
                    this.InputType.Equals(input.InputType))
                ) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && 
                (
                    this.Masked == input.Masked ||
                    (this.Masked != null &&
                    this.Masked.Equals(input.Masked))
                ) && 
                (
                    this.MaskingText == input.MaskingText ||
                    (this.MaskingText != null &&
                    this.MaskingText.Equals(input.MaskingText))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.RadioCheckType == input.RadioCheckType ||
                    (this.RadioCheckType != null &&
                    this.RadioCheckType.Equals(input.RadioCheckType))
                ) && 
                (
                    this._ReadOnly == input._ReadOnly ||
                    (this._ReadOnly != null &&
                    this._ReadOnly.Equals(input._ReadOnly))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Tooltip == input.Tooltip ||
                    (this.Tooltip != null &&
                    this.Tooltip.Equals(input.Tooltip))
                ) && 
                (
                    this.UrlOverridable == input.UrlOverridable ||
                    (this.UrlOverridable != null &&
                    this.UrlOverridable.Equals(input.UrlOverridable))
                ) && 
                (
                    this.Validation == input.Validation ||
                    (this.Validation != null &&
                    this.Validation.Equals(input.Validation))
                ) && 
                (
                    this.ValidationData == input.ValidationData ||
                    (this.ValidationData != null &&
                    this.ValidationData.Equals(input.ValidationData))
                ) && 
                (
                    this.ValidationErrMsg == input.ValidationErrMsg ||
                    (this.ValidationErrMsg != null &&
                    this.ValidationErrMsg.Equals(input.ValidationErrMsg))
                ) && 
                (
                    this.ValueExpression == input.ValueExpression ||
                    (this.ValueExpression != null &&
                    this.ValueExpression.Equals(input.ValueExpression))
                ) && 
                (
                    this.Visible == input.Visible ||
                    (this.Visible != null &&
                    this.Visible.Equals(input.Visible))
                ) && 
                (
                    this.VisibleOptions == input.VisibleOptions ||
                    this.VisibleOptions != null &&
                    this.VisibleOptions.SequenceEqual(input.VisibleOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alignment != null)
                    hashCode = hashCode * 59 + this.Alignment.GetHashCode();
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.BackgroundColor != null)
                    hashCode = hashCode * 59 + this.BackgroundColor.GetHashCode();
                if (this.BorderColor != null)
                    hashCode = hashCode * 59 + this.BorderColor.GetHashCode();
                if (this.BorderStyle != null)
                    hashCode = hashCode * 59 + this.BorderStyle.GetHashCode();
                if (this.BorderWidth != null)
                    hashCode = hashCode * 59 + this.BorderWidth.GetHashCode();
                if (this.Calculated != null)
                    hashCode = hashCode * 59 + this.Calculated.GetHashCode();
                if (this.ConditionalAction != null)
                    hashCode = hashCode * 59 + this.ConditionalAction.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.DisplayFormat != null)
                    hashCode = hashCode * 59 + this.DisplayFormat.GetHashCode();
                if (this.DisplayFormatType != null)
                    hashCode = hashCode * 59 + this.DisplayFormatType.GetHashCode();
                if (this.DisplayLabel != null)
                    hashCode = hashCode * 59 + this.DisplayLabel.GetHashCode();
                if (this.FontColor != null)
                    hashCode = hashCode * 59 + this.FontColor.GetHashCode();
                if (this.FontName != null)
                    hashCode = hashCode * 59 + this.FontName.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.HiddenOptions != null)
                    hashCode = hashCode * 59 + this.HiddenOptions.GetHashCode();
                if (this.Hyperlink != null)
                    hashCode = hashCode * 59 + this.Hyperlink.GetHashCode();
                if (this.InputType != null)
                    hashCode = hashCode * 59 + this.InputType.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.Masked != null)
                    hashCode = hashCode * 59 + this.Masked.GetHashCode();
                if (this.MaskingText != null)
                    hashCode = hashCode * 59 + this.MaskingText.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.MaxValue != null)
                    hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                if (this.MinValue != null)
                    hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.RadioCheckType != null)
                    hashCode = hashCode * 59 + this.RadioCheckType.GetHashCode();
                if (this._ReadOnly != null)
                    hashCode = hashCode * 59 + this._ReadOnly.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Tooltip != null)
                    hashCode = hashCode * 59 + this.Tooltip.GetHashCode();
                if (this.UrlOverridable != null)
                    hashCode = hashCode * 59 + this.UrlOverridable.GetHashCode();
                if (this.Validation != null)
                    hashCode = hashCode * 59 + this.Validation.GetHashCode();
                if (this.ValidationData != null)
                    hashCode = hashCode * 59 + this.ValidationData.GetHashCode();
                if (this.ValidationErrMsg != null)
                    hashCode = hashCode * 59 + this.ValidationErrMsg.GetHashCode();
                if (this.ValueExpression != null)
                    hashCode = hashCode * 59 + this.ValueExpression.GetHashCode();
                if (this.Visible != null)
                    hashCode = hashCode * 59 + this.Visible.GetHashCode();
                if (this.VisibleOptions != null)
                    hashCode = hashCode * 59 + this.VisibleOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
