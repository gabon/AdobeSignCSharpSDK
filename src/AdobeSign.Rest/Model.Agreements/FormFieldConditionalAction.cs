/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AdobeSign.Rest.Model.Agreements
{
    /// <summary>
    /// Conditional actions to perfom on this form field.
    /// </summary>
    [DataContract]
    public partial class FormFieldConditionalAction :  IEquatable<FormFieldConditionalAction>, IValidatableObject
    {
        /// <summary>
        /// Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
        /// </summary>
        /// <value>Action to show/hide the form field is to be taken on the basis of evaluation of conditions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum SHOW for value: SHOW
            /// </summary>
            [EnumMember(Value = "SHOW")]
            SHOW = 1,
            
            /// <summary>
            /// Enum HIDE for value: HIDE
            /// </summary>
            [EnumMember(Value = "HIDE")]
            HIDE = 2,
            
            /// <summary>
            /// Enum DISABLE for value: DISABLE
            /// </summary>
            [EnumMember(Value = "DISABLE")]
            DISABLE = 3,
            
            /// <summary>
            /// Enum ENABLE for value: ENABLE
            /// </summary>
            [EnumMember(Value = "ENABLE")]
            ENABLE = 4
        }

        /// <summary>
        /// Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
        /// </summary>
        /// <value>Action to show/hide the form field is to be taken on the basis of evaluation of conditions.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// It indicates if any one of the conditions or all of them have to be true.
        /// </summary>
        /// <value>It indicates if any one of the conditions or all of them have to be true.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AnyOrAllEnum
        {
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 1,
            
            /// <summary>
            /// Enum ANY for value: ANY
            /// </summary>
            [EnumMember(Value = "ANY")]
            ANY = 2
        }

        /// <summary>
        /// It indicates if any one of the conditions or all of them have to be true.
        /// </summary>
        /// <value>It indicates if any one of the conditions or all of them have to be true.</value>
        [DataMember(Name="anyOrAll", EmitDefaultValue=false)]
        public AnyOrAllEnum? AnyOrAll { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormFieldConditionalAction" /> class.
        /// </summary>
        /// <param name="Action">Action to show/hide the form field is to be taken on the basis of evaluation of conditions..</param>
        /// <param name="AnyOrAll">It indicates if any one of the conditions or all of them have to be true..</param>
        /// <param name="Predicates">The predicates to be evaluated in order to determine whether this condition is true.</param>
        public FormFieldConditionalAction(ActionEnum? Action = default(ActionEnum?), AnyOrAllEnum? AnyOrAll = default(AnyOrAllEnum?), List<FormFieldConditionPredicate> Predicates = default(List<FormFieldConditionPredicate>))
        {
            this.Action = Action;
            this.AnyOrAll = AnyOrAll;
            this.Predicates = Predicates;
        }
        


        /// <summary>
        /// The predicates to be evaluated in order to determine whether this condition is true
        /// </summary>
        /// <value>The predicates to be evaluated in order to determine whether this condition is true</value>
        [DataMember(Name="predicates", EmitDefaultValue=false)]
        public List<FormFieldConditionPredicate> Predicates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormFieldConditionalAction {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  AnyOrAll: ").Append(AnyOrAll).Append("\n");
            sb.Append("  Predicates: ").Append(Predicates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormFieldConditionalAction);
        }

        /// <summary>
        /// Returns true if FormFieldConditionalAction instances are equal
        /// </summary>
        /// <param name="input">Instance of FormFieldConditionalAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormFieldConditionalAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.AnyOrAll == input.AnyOrAll ||
                    (this.AnyOrAll != null &&
                    this.AnyOrAll.Equals(input.AnyOrAll))
                ) && 
                (
                    this.Predicates == input.Predicates ||
                    this.Predicates != null &&
                    this.Predicates.SequenceEqual(input.Predicates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.AnyOrAll != null)
                    hashCode = hashCode * 59 + this.AnyOrAll.GetHashCode();
                if (this.Predicates != null)
                    hashCode = hashCode * 59 + this.Predicates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
