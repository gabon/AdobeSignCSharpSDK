/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AdobeSign.Rest.Model.Agreements
{
    /// <summary>
    /// A predicate used to determine whether the condtion succeeds
    /// </summary>
    [DataContract]
    public partial class FormFieldConditionPredicate :  IEquatable<FormFieldConditionPredicate>, IValidatableObject
    {
        /// <summary>
        /// Operator to be applied on the value of the predicate field.
        /// </summary>
        /// <value>Operator to be applied on the value of the predicate field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            
            /// <summary>
            /// Enum EQUALS for value: EQUALS
            /// </summary>
            [EnumMember(Value = "EQUALS")]
            EQUALS = 1,
            
            /// <summary>
            /// Enum NOTEQUALS for value: NOT_EQUALS
            /// </summary>
            [EnumMember(Value = "NOT_EQUALS")]
            NOTEQUALS = 2,
            
            /// <summary>
            /// Enum LESSTHAN for value: LESS_THAN
            /// </summary>
            [EnumMember(Value = "LESS_THAN")]
            LESSTHAN = 3,
            
            /// <summary>
            /// Enum LESSTHANEQUALS for value: LESS_THAN_EQUALS
            /// </summary>
            [EnumMember(Value = "LESS_THAN_EQUALS")]
            LESSTHANEQUALS = 4,
            
            /// <summary>
            /// Enum GREATERTHAN for value: GREATER_THAN
            /// </summary>
            [EnumMember(Value = "GREATER_THAN")]
            GREATERTHAN = 5,
            
            /// <summary>
            /// Enum GREATERTHANEQUALS for value: GREATER_THAN_EQUALS
            /// </summary>
            [EnumMember(Value = "GREATER_THAN_EQUALS")]
            GREATERTHANEQUALS = 6,
            
            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")]
            IN = 7,
            
            /// <summary>
            /// Enum NOTIN for value: NOT_IN
            /// </summary>
            [EnumMember(Value = "NOT_IN")]
            NOTIN = 8,
            
            /// <summary>
            /// Enum CONTAINS for value: CONTAINS
            /// </summary>
            [EnumMember(Value = "CONTAINS")]
            CONTAINS = 9,
            
            /// <summary>
            /// Enum NOTCONTAINS for value: NOT_CONTAINS
            /// </summary>
            [EnumMember(Value = "NOT_CONTAINS")]
            NOTCONTAINS = 10
        }

        /// <summary>
        /// Operator to be applied on the value of the predicate field.
        /// </summary>
        /// <value>Operator to be applied on the value of the predicate field.</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public OperatorEnum? _Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormFieldConditionPredicate" /> class.
        /// </summary>
        /// <param name="FieldLocationIndex">Index of the location of the form field used in the predicate.</param>
        /// <param name="FieldName">Name of the field whose value is the basis of predicate.</param>
        /// <param name="_Operator">Operator to be applied on the value of the predicate field..</param>
        /// <param name="Value">Value to compare against the value of the predicate&#39;s form field, using the specified operator.</param>
        public FormFieldConditionPredicate(int? FieldLocationIndex = default(int?), string FieldName = default(string), OperatorEnum? _Operator = default(OperatorEnum?), string Value = default(string))
        {
            this.FieldLocationIndex = FieldLocationIndex;
            this.FieldName = FieldName;
            this._Operator = _Operator;
            this.Value = Value;
        }
        
        /// <summary>
        /// Index of the location of the form field used in the predicate
        /// </summary>
        /// <value>Index of the location of the form field used in the predicate</value>
        [DataMember(Name="fieldLocationIndex", EmitDefaultValue=false)]
        public int? FieldLocationIndex { get; set; }

        /// <summary>
        /// Name of the field whose value is the basis of predicate
        /// </summary>
        /// <value>Name of the field whose value is the basis of predicate</value>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }


        /// <summary>
        /// Value to compare against the value of the predicate&#39;s form field, using the specified operator
        /// </summary>
        /// <value>Value to compare against the value of the predicate&#39;s form field, using the specified operator</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormFieldConditionPredicate {\n");
            sb.Append("  FieldLocationIndex: ").Append(FieldLocationIndex).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormFieldConditionPredicate);
        }

        /// <summary>
        /// Returns true if FormFieldConditionPredicate instances are equal
        /// </summary>
        /// <param name="input">Instance of FormFieldConditionPredicate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormFieldConditionPredicate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldLocationIndex == input.FieldLocationIndex ||
                    (this.FieldLocationIndex != null &&
                    this.FieldLocationIndex.Equals(input.FieldLocationIndex))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this._Operator == input._Operator ||
                    (this._Operator != null &&
                    this._Operator.Equals(input._Operator))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldLocationIndex != null)
                    hashCode = hashCode * 59 + this.FieldLocationIndex.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this._Operator != null)
                    hashCode = hashCode * 59 + this._Operator.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
