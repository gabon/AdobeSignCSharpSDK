/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AdobeSign.Rest.Model.Agreements
{
    /// <summary>
    /// Hyperlink-specific data for hyperlink form fields
    /// </summary>
    [DataContract]
    public partial class FormFieldHyperlink :  IEquatable<FormFieldHyperlink>, IValidatableObject
    {
        /// <summary>
        /// Type of link in an agreement.
        /// </summary>
        /// <value>Type of link in an agreement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LinkTypeEnum
        {
            
            /// <summary>
            /// Enum INTERNAL for value: INTERNAL
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNAL = 1,
            
            /// <summary>
            /// Enum EXTERNAL for value: EXTERNAL
            /// </summary>
            [EnumMember(Value = "EXTERNAL")]
            EXTERNAL = 2,
            
            /// <summary>
            /// Enum FROMTEXT for value: FROM_TEXT
            /// </summary>
            [EnumMember(Value = "FROM_TEXT")]
            FROMTEXT = 3
        }

        /// <summary>
        /// Type of link in an agreement.
        /// </summary>
        /// <value>Type of link in an agreement.</value>
        [DataMember(Name="linkType", EmitDefaultValue=false)]
        public LinkTypeEnum? LinkType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormFieldHyperlink" /> class.
        /// </summary>
        /// <param name="DocumentLocation">Location on the document pointed by the link in case of INTERNAL type link.</param>
        /// <param name="LinkType">Type of link in an agreement..</param>
        /// <param name="Url">URL, in case of EXTERNAL type link.</param>
        public FormFieldHyperlink(FormFieldLocation DocumentLocation = default(FormFieldLocation), LinkTypeEnum? LinkType = default(LinkTypeEnum?), string Url = default(string))
        {
            this.DocumentLocation = DocumentLocation;
            this.LinkType = LinkType;
            this.Url = Url;
        }
        
        /// <summary>
        /// Location on the document pointed by the link in case of INTERNAL type link
        /// </summary>
        /// <value>Location on the document pointed by the link in case of INTERNAL type link</value>
        [DataMember(Name="documentLocation", EmitDefaultValue=false)]
        public FormFieldLocation DocumentLocation { get; set; }


        /// <summary>
        /// URL, in case of EXTERNAL type link
        /// </summary>
        /// <value>URL, in case of EXTERNAL type link</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormFieldHyperlink {\n");
            sb.Append("  DocumentLocation: ").Append(DocumentLocation).Append("\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormFieldHyperlink);
        }

        /// <summary>
        /// Returns true if FormFieldHyperlink instances are equal
        /// </summary>
        /// <param name="input">Instance of FormFieldHyperlink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormFieldHyperlink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentLocation == input.DocumentLocation ||
                    (this.DocumentLocation != null &&
                    this.DocumentLocation.Equals(input.DocumentLocation))
                ) && 
                (
                    this.LinkType == input.LinkType ||
                    (this.LinkType != null &&
                    this.LinkType.Equals(input.LinkType))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentLocation != null)
                    hashCode = hashCode * 59 + this.DocumentLocation.GetHashCode();
                if (this.LinkType != null)
                    hashCode = hashCode * 59 + this.LinkType.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
