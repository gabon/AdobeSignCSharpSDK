/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdobeSign.Rest.Client.SwaggerDateConverter;

namespace AdobeSign.Rest.Model.Agreements
{
    /// <summary>
    /// AgreementView
    /// </summary>
    [DataContract]
    public partial class AgreementView :  IEquatable<AgreementView>, IValidatableObject
    {
        /// <summary>
        /// Name of the requested agreement view
        /// </summary>
        /// <value>Name of the requested agreement view</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            
            /// <summary>
            /// Enum COMPOSE for value: COMPOSE
            /// </summary>
            [EnumMember(Value = "COMPOSE")]
            COMPOSE = 1,
            
            /// <summary>
            /// Enum MODIFY for value: MODIFY
            /// </summary>
            [EnumMember(Value = "MODIFY")]
            MODIFY = 2,
            
            /// <summary>
            /// Enum PREFILL for value: PREFILL
            /// </summary>
            [EnumMember(Value = "PREFILL")]
            PREFILL = 3,
            
            /// <summary>
            /// Enum AUTHORING for value: AUTHORING
            /// </summary>
            [EnumMember(Value = "AUTHORING")]
            AUTHORING = 4,
            
            /// <summary>
            /// Enum SENDPROGRESS for value: SEND_PROGRESS
            /// </summary>
            [EnumMember(Value = "SEND_PROGRESS")]
            SENDPROGRESS = 5,
            
            /// <summary>
            /// Enum POSTCREATE for value: POST_CREATE
            /// </summary>
            [EnumMember(Value = "POST_CREATE")]
            POSTCREATE = 6,
            
            /// <summary>
            /// Enum DOCUMENT for value: DOCUMENT
            /// </summary>
            [EnumMember(Value = "DOCUMENT")]
            DOCUMENT = 7,
            
            /// <summary>
            /// Enum MANAGE for value: MANAGE
            /// </summary>
            [EnumMember(Value = "MANAGE")]
            MANAGE = 8,
            
            /// <summary>
            /// Enum SIGNING for value: SIGNING
            /// </summary>
            [EnumMember(Value = "SIGNING")]
            SIGNING = 9,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 10
        }

        /// <summary>
        /// Name of the requested agreement view
        /// </summary>
        /// <value>Name of the requested agreement view</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementView" /> class.
        /// </summary>
        /// <param name="EmbeddedCode">Embedded code of url of resource .</param>
        /// <param name="Expiration">Expiration of user url .</param>
        /// <param name="IsCurrent">True if this view is the current view.</param>
        /// <param name="Name">Name of the requested agreement view.</param>
        /// <param name="Url">Url of resource location.</param>
        public AgreementView(string EmbeddedCode = default(string), DateTime? Expiration = default(DateTime?), bool? IsCurrent = default(bool?), NameEnum? Name = default(NameEnum?), string Url = default(string))
        {
            this.EmbeddedCode = EmbeddedCode;
            this.Expiration = Expiration;
            this.IsCurrent = IsCurrent;
            this.Name = Name;
            this.Url = Url;
        }
        
        /// <summary>
        /// Embedded code of url of resource 
        /// </summary>
        /// <value>Embedded code of url of resource </value>
        [DataMember(Name="embeddedCode", EmitDefaultValue=false)]
        public string EmbeddedCode { get; set; }

        /// <summary>
        /// Expiration of user url 
        /// </summary>
        /// <value>Expiration of user url </value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// True if this view is the current view
        /// </summary>
        /// <value>True if this view is the current view</value>
        [DataMember(Name="isCurrent", EmitDefaultValue=false)]
        public bool? IsCurrent { get; set; }


        /// <summary>
        /// Url of resource location
        /// </summary>
        /// <value>Url of resource location</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgreementView {\n");
            sb.Append("  EmbeddedCode: ").Append(EmbeddedCode).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  IsCurrent: ").Append(IsCurrent).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgreementView);
        }

        /// <summary>
        /// Returns true if AgreementView instances are equal
        /// </summary>
        /// <param name="input">Instance of AgreementView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgreementView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmbeddedCode == input.EmbeddedCode ||
                    (this.EmbeddedCode != null &&
                    this.EmbeddedCode.Equals(input.EmbeddedCode))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.IsCurrent == input.IsCurrent ||
                    (this.IsCurrent != null &&
                    this.IsCurrent.Equals(input.IsCurrent))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmbeddedCode != null)
                    hashCode = hashCode * 59 + this.EmbeddedCode.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.IsCurrent != null)
                    hashCode = hashCode * 59 + this.IsCurrent.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
