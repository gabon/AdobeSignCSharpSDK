/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AdobeSign.Rest.Model.Agreements
{
    /// <summary>
    /// SupportingDocument
    /// </summary>
    [DataContract]
    public partial class SupportingDocument :  IEquatable<SupportingDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportingDocument" /> class.
        /// </summary>
        /// <param name="DisplayLabel">Display name of the document.</param>
        /// <param name="FieldName">The name of the supporting document field.</param>
        /// <param name="Id">Id representing the document.</param>
        /// <param name="MimeType">Mime-type of the document.</param>
        /// <param name="NumPages">Number of pages in the document.</param>
        /// <param name="ParticipantId">The unique identifier of the participant that uploaded the supporting document.</param>
        public SupportingDocument(string DisplayLabel = default(string), string FieldName = default(string), string Id = default(string), string MimeType = default(string), int? NumPages = default(int?), string ParticipantId = default(string))
        {
            this.DisplayLabel = DisplayLabel;
            this.FieldName = FieldName;
            this.Id = Id;
            this.MimeType = MimeType;
            this.NumPages = NumPages;
            this.ParticipantId = ParticipantId;
        }
        
        /// <summary>
        /// Display name of the document
        /// </summary>
        /// <value>Display name of the document</value>
        [DataMember(Name="displayLabel", EmitDefaultValue=false)]
        public string DisplayLabel { get; set; }

        /// <summary>
        /// The name of the supporting document field
        /// </summary>
        /// <value>The name of the supporting document field</value>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Id representing the document
        /// </summary>
        /// <value>Id representing the document</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Mime-type of the document
        /// </summary>
        /// <value>Mime-type of the document</value>
        [DataMember(Name="mimeType", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Number of pages in the document
        /// </summary>
        /// <value>Number of pages in the document</value>
        [DataMember(Name="numPages", EmitDefaultValue=false)]
        public int? NumPages { get; set; }

        /// <summary>
        /// The unique identifier of the participant that uploaded the supporting document
        /// </summary>
        /// <value>The unique identifier of the participant that uploaded the supporting document</value>
        [DataMember(Name="participantId", EmitDefaultValue=false)]
        public string ParticipantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SupportingDocument {\n");
            sb.Append("  DisplayLabel: ").Append(DisplayLabel).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  NumPages: ").Append(NumPages).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportingDocument);
        }

        /// <summary>
        /// Returns true if SupportingDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportingDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportingDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayLabel == input.DisplayLabel ||
                    (this.DisplayLabel != null &&
                    this.DisplayLabel.Equals(input.DisplayLabel))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.NumPages == input.NumPages ||
                    (this.NumPages != null &&
                    this.NumPages.Equals(input.NumPages))
                ) && 
                (
                    this.ParticipantId == input.ParticipantId ||
                    (this.ParticipantId != null &&
                    this.ParticipantId.Equals(input.ParticipantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayLabel != null)
                    hashCode = hashCode * 59 + this.DisplayLabel.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.NumPages != null)
                    hashCode = hashCode * 59 + this.NumPages.GetHashCode();
                if (this.ParticipantId != null)
                    hashCode = hashCode * 59 + this.ParticipantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
