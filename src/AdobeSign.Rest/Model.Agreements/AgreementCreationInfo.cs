/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdobeSign.Rest.Client.SwaggerDateConverter;

namespace AdobeSign.Rest.Model.Agreements
{
    /// <summary>
    /// AgreementCreationInfo
    /// </summary>
    [DataContract]
    public partial class AgreementCreationInfo :  IEquatable<AgreementCreationInfo>, IValidatableObject
    {
        /// <summary>
        /// Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.
        /// </summary>
        /// <value>Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReminderFrequencyEnum
        {
            
            /// <summary>
            /// Enum DAILYUNTILSIGNED for value: DAILY_UNTIL_SIGNED
            /// </summary>
            [EnumMember(Value = "DAILY_UNTIL_SIGNED")]
            DAILYUNTILSIGNED = 1,
            
            /// <summary>
            /// Enum WEEKDAILYUNTILSIGNED for value: WEEKDAILY_UNTIL_SIGNED
            /// </summary>
            [EnumMember(Value = "WEEKDAILY_UNTIL_SIGNED")]
            WEEKDAILYUNTILSIGNED = 2,
            
            /// <summary>
            /// Enum EVERYOTHERDAYUNTILSIGNED for value: EVERY_OTHER_DAY_UNTIL_SIGNED
            /// </summary>
            [EnumMember(Value = "EVERY_OTHER_DAY_UNTIL_SIGNED")]
            EVERYOTHERDAYUNTILSIGNED = 3,
            
            /// <summary>
            /// Enum EVERYTHIRDDAYUNTILSIGNED for value: EVERY_THIRD_DAY_UNTIL_SIGNED
            /// </summary>
            [EnumMember(Value = "EVERY_THIRD_DAY_UNTIL_SIGNED")]
            EVERYTHIRDDAYUNTILSIGNED = 4,
            
            /// <summary>
            /// Enum EVERYFIFTHDAYUNTILSIGNED for value: EVERY_FIFTH_DAY_UNTIL_SIGNED
            /// </summary>
            [EnumMember(Value = "EVERY_FIFTH_DAY_UNTIL_SIGNED")]
            EVERYFIFTHDAYUNTILSIGNED = 5,
            
            /// <summary>
            /// Enum WEEKLYUNTILSIGNED for value: WEEKLY_UNTIL_SIGNED
            /// </summary>
            [EnumMember(Value = "WEEKLY_UNTIL_SIGNED")]
            WEEKLYUNTILSIGNED = 6,
            
            /// <summary>
            /// Enum ONCE for value: ONCE
            /// </summary>
            [EnumMember(Value = "ONCE")]
            ONCE = 7
        }

        /// <summary>
        /// Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.
        /// </summary>
        /// <value>Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.</value>
        [DataMember(Name="reminderFrequency", EmitDefaultValue=false)]
        public ReminderFrequencyEnum? ReminderFrequency { get; set; }
        /// <summary>
        /// Specifies the type of signature you would like to request - written or e-signature. The possible values are &lt;br&gt; ESIGN : Agreement needs to be signed electronically &lt;br&gt;, WRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system
        /// </summary>
        /// <value>Specifies the type of signature you would like to request - written or e-signature. The possible values are &lt;br&gt; ESIGN : Agreement needs to be signed electronically &lt;br&gt;, WRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SignatureTypeEnum
        {
            
            /// <summary>
            /// Enum ESIGN for value: ESIGN
            /// </summary>
            [EnumMember(Value = "ESIGN")]
            ESIGN = 1,
            
            /// <summary>
            /// Enum WRITTEN for value: WRITTEN
            /// </summary>
            [EnumMember(Value = "WRITTEN")]
            WRITTEN = 2
        }

        /// <summary>
        /// Specifies the type of signature you would like to request - written or e-signature. The possible values are &lt;br&gt; ESIGN : Agreement needs to be signed electronically &lt;br&gt;, WRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system
        /// </summary>
        /// <value>Specifies the type of signature you would like to request - written or e-signature. The possible values are &lt;br&gt; ESIGN : Agreement needs to be signed electronically &lt;br&gt;, WRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system</value>
        [DataMember(Name="signatureType", EmitDefaultValue=false)]
        public SignatureTypeEnum? SignatureType { get; set; }
        /// <summary>
        /// The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID
        /// </summary>
        /// <value>The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum AUTHORING for value: AUTHORING
            /// </summary>
            [EnumMember(Value = "AUTHORING")]
            AUTHORING = 1,
            
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 2,
            
            /// <summary>
            /// Enum INPROCESS for value: IN_PROCESS
            /// </summary>
            [EnumMember(Value = "IN_PROCESS")]
            INPROCESS = 3
        }

        /// <summary>
        /// The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID
        /// </summary>
        /// <value>The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// This is a server generated attribute which provides the detailed status of an agreement.
        /// </summary>
        /// <value>This is a server generated attribute which provides the detailed status of an agreement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OUTFORSIGNATURE for value: OUT_FOR_SIGNATURE
            /// </summary>
            [EnumMember(Value = "OUT_FOR_SIGNATURE")]
            OUTFORSIGNATURE = 1,
            
            /// <summary>
            /// Enum OUTFORDELIVERY for value: OUT_FOR_DELIVERY
            /// </summary>
            [EnumMember(Value = "OUT_FOR_DELIVERY")]
            OUTFORDELIVERY = 2,
            
            /// <summary>
            /// Enum OUTFORACCEPTANCE for value: OUT_FOR_ACCEPTANCE
            /// </summary>
            [EnumMember(Value = "OUT_FOR_ACCEPTANCE")]
            OUTFORACCEPTANCE = 3,
            
            /// <summary>
            /// Enum OUTFORFORMFILLING for value: OUT_FOR_FORM_FILLING
            /// </summary>
            [EnumMember(Value = "OUT_FOR_FORM_FILLING")]
            OUTFORFORMFILLING = 4,
            
            /// <summary>
            /// Enum OUTFORAPPROVAL for value: OUT_FOR_APPROVAL
            /// </summary>
            [EnumMember(Value = "OUT_FOR_APPROVAL")]
            OUTFORAPPROVAL = 5,
            
            /// <summary>
            /// Enum AUTHORING for value: AUTHORING
            /// </summary>
            [EnumMember(Value = "AUTHORING")]
            AUTHORING = 6,
            
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 7,
            
            /// <summary>
            /// Enum SIGNED for value: SIGNED
            /// </summary>
            [EnumMember(Value = "SIGNED")]
            SIGNED = 8,
            
            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 9,
            
            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 10,
            
            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 11,
            
            /// <summary>
            /// Enum FORMFILLED for value: FORM_FILLED
            /// </summary>
            [EnumMember(Value = "FORM_FILLED")]
            FORMFILLED = 12,
            
            /// <summary>
            /// Enum EXPIRED for value: EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED = 13,
            
            /// <summary>
            /// Enum ARCHIVED for value: ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVED = 14,
            
            /// <summary>
            /// Enum PREFILL for value: PREFILL
            /// </summary>
            [EnumMember(Value = "PREFILL")]
            PREFILL = 15,
            
            /// <summary>
            /// Enum WIDGETWAITINGFORVERIFICATION for value: WIDGET_WAITING_FOR_VERIFICATION
            /// </summary>
            [EnumMember(Value = "WIDGET_WAITING_FOR_VERIFICATION")]
            WIDGETWAITINGFORVERIFICATION = 16,
            
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 17,
            
            /// <summary>
            /// Enum DOCUMENTSNOTYETPROCESSED for value: DOCUMENTS_NOT_YET_PROCESSED
            /// </summary>
            [EnumMember(Value = "DOCUMENTS_NOT_YET_PROCESSED")]
            DOCUMENTSNOTYETPROCESSED = 18,
            
            /// <summary>
            /// Enum WAITINGFORFAXIN for value: WAITING_FOR_FAXIN
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_FAXIN")]
            WAITINGFORFAXIN = 19,
            
            /// <summary>
            /// Enum WAITINGFORVERIFICATION for value: WAITING_FOR_VERIFICATION
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_VERIFICATION")]
            WAITINGFORVERIFICATION = 20
        }

        /// <summary>
        /// This is a server generated attribute which provides the detailed status of an agreement.
        /// </summary>
        /// <value>This is a server generated attribute which provides the detailed status of an agreement.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementCreationInfo" /> class.
        /// </summary>
        /// <param name="Ccs">A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation..</param>
        /// <param name="CreatedDate">Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time.</param>
        /// <param name="DeviceInfo">Device info of the offline device. It should only be provided in case of offline agreement creation..</param>
        /// <param name="DocumentVisibilityEnabled">If set to true, enable limited document visibility. Should not be provided in offline agreement creation..</param>
        /// <param name="EmailOption">Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement..</param>
        /// <param name="ExpirationTime">Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation..</param>
        /// <param name="ExternalId">An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation..</param>
        /// <param name="FileInfos">A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified.</param>
        /// <param name="FirstReminderDelay">Integer which specifies the delay in hours before sending the first reminder.&lt;br&gt;This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.&lt;br&gt;If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.&lt;br&gt;i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation..</param>
        /// <param name="FormFieldLayerTemplates">Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified.</param>
        /// <param name="Id">The unique identifier of the agreement.If provided in POST, it will simply be ignored.</param>
        /// <param name="Locale">The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender.</param>
        /// <param name="MergeFieldInfo">Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported.</param>
        /// <param name="Message">An optional message to the participants, describing what is being sent or why their signature is required.</param>
        /// <param name="Name">The name of the agreement that will be used to identify it, in emails, website and other places.</param>
        /// <param name="ParticipantSetsInfo">A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc ), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document.</param>
        /// <param name="PostSignOption">URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation..</param>
        /// <param name="ReminderFrequency">Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown..</param>
        /// <param name="SecurityOption">Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation..</param>
        /// <param name="SenderEmail">Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored.</param>
        /// <param name="SignatureType">Specifies the type of signature you would like to request - written or e-signature. The possible values are &lt;br&gt; ESIGN : Agreement needs to be signed electronically &lt;br&gt;, WRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system.</param>
        /// <param name="State">The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID.</param>
        /// <param name="Status">This is a server generated attribute which provides the detailed status of an agreement..</param>
        /// <param name="VaultingInfo">Vaulting properties that allows Adobe Sign to securely store documents with a vault provider.</param>
        /// <param name="WorkflowId">The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation..</param>
        public AgreementCreationInfo(List<AgreementCcInfo> Ccs = default(List<AgreementCcInfo>), DateTime? CreatedDate = default(DateTime?), OfflineDeviceInfo DeviceInfo = default(OfflineDeviceInfo), bool? DocumentVisibilityEnabled = default(bool?), EmailOption EmailOption = default(EmailOption), DateTime? ExpirationTime = default(DateTime?), ExternalId ExternalId = default(ExternalId), List<FileInfo> FileInfos = default(List<FileInfo>), int? FirstReminderDelay = default(int?), List<FileInfo> FormFieldLayerTemplates = default(List<FileInfo>), string Id = default(string), string Locale = default(string), List<MergefieldInfo> MergeFieldInfo = default(List<MergefieldInfo>), string Message = default(string), string Name = default(string), List<ParticipantSetInfo> ParticipantSetsInfo = default(List<ParticipantSetInfo>), PostSignOption PostSignOption = default(PostSignOption), ReminderFrequencyEnum? ReminderFrequency = default(ReminderFrequencyEnum?), SecurityOption SecurityOption = default(SecurityOption), string SenderEmail = default(string), SignatureTypeEnum? SignatureType = default(SignatureTypeEnum?), StateEnum? State = default(StateEnum?), StatusEnum? Status = default(StatusEnum?), VaultingInfo VaultingInfo = default(VaultingInfo), string WorkflowId = default(string))
        {
            this.Ccs = Ccs;
            this.CreatedDate = CreatedDate;
            this.DeviceInfo = DeviceInfo;
            this.DocumentVisibilityEnabled = DocumentVisibilityEnabled;
            this.EmailOption = EmailOption;
            this.ExpirationTime = ExpirationTime;
            this.ExternalId = ExternalId;
            this.FileInfos = FileInfos;
            this.FirstReminderDelay = FirstReminderDelay;
            this.FormFieldLayerTemplates = FormFieldLayerTemplates;
            this.Id = Id;
            this.Locale = Locale;
            this.MergeFieldInfo = MergeFieldInfo;
            this.Message = Message;
            this.Name = Name;
            this.ParticipantSetsInfo = ParticipantSetsInfo;
            this.PostSignOption = PostSignOption;
            this.ReminderFrequency = ReminderFrequency;
            this.SecurityOption = SecurityOption;
            this.SenderEmail = SenderEmail;
            this.SignatureType = SignatureType;
            this.State = State;
            this.Status = Status;
            this.VaultingInfo = VaultingInfo;
            this.WorkflowId = WorkflowId;
        }
        
        /// <summary>
        /// A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="ccs", EmitDefaultValue=false)]
        public List<AgreementCcInfo> Ccs { get; set; }

        /// <summary>
        /// Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
        /// </summary>
        /// <value>Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Device info of the offline device. It should only be provided in case of offline agreement creation.
        /// </summary>
        /// <value>Device info of the offline device. It should only be provided in case of offline agreement creation.</value>
        [DataMember(Name="deviceInfo", EmitDefaultValue=false)]
        public OfflineDeviceInfo DeviceInfo { get; set; }

        /// <summary>
        /// If set to true, enable limited document visibility. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>If set to true, enable limited document visibility. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="documentVisibilityEnabled", EmitDefaultValue=false)]
        public bool? DocumentVisibilityEnabled { get; set; }

        /// <summary>
        /// Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.
        /// </summary>
        /// <value>Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.</value>
        [DataMember(Name="emailOption", EmitDefaultValue=false)]
        public EmailOption EmailOption { get; set; }

        /// <summary>
        /// Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="expirationTime", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpirationTime { get; set; }

        /// <summary>
        /// An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public ExternalId ExternalId { get; set; }

        /// <summary>
        /// A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
        /// </summary>
        /// <value>A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified</value>
        [DataMember(Name="fileInfos", EmitDefaultValue=false)]
        public List<FileInfo> FileInfos { get; set; }

        /// <summary>
        /// Integer which specifies the delay in hours before sending the first reminder.&lt;br&gt;This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.&lt;br&gt;If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.&lt;br&gt;i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>Integer which specifies the delay in hours before sending the first reminder.&lt;br&gt;This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.&lt;br&gt;If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.&lt;br&gt;i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="firstReminderDelay", EmitDefaultValue=false)]
        public int? FirstReminderDelay { get; set; }

        /// <summary>
        /// Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
        /// </summary>
        /// <value>Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified</value>
        [DataMember(Name="formFieldLayerTemplates", EmitDefaultValue=false)]
        public List<FileInfo> FormFieldLayerTemplates { get; set; }

        /// <summary>
        /// The unique identifier of the agreement.If provided in POST, it will simply be ignored
        /// </summary>
        /// <value>The unique identifier of the agreement.If provided in POST, it will simply be ignored</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
        /// </summary>
        /// <value>The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
        /// </summary>
        /// <value>Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported</value>
        [DataMember(Name="mergeFieldInfo", EmitDefaultValue=false)]
        public List<MergefieldInfo> MergeFieldInfo { get; set; }

        /// <summary>
        /// An optional message to the participants, describing what is being sent or why their signature is required
        /// </summary>
        /// <value>An optional message to the participants, describing what is being sent or why their signature is required</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The name of the agreement that will be used to identify it, in emails, website and other places
        /// </summary>
        /// <value>The name of the agreement that will be used to identify it, in emails, website and other places</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc ), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document
        /// </summary>
        /// <value>A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc ), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document</value>
        [DataMember(Name="participantSetsInfo", EmitDefaultValue=false)]
        public List<ParticipantSetInfo> ParticipantSetsInfo { get; set; }

        /// <summary>
        /// URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="postSignOption", EmitDefaultValue=false)]
        public PostSignOption PostSignOption { get; set; }


        /// <summary>
        /// Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="securityOption", EmitDefaultValue=false)]
        public SecurityOption SecurityOption { get; set; }

        /// <summary>
        /// Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored
        /// </summary>
        /// <value>Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored</value>
        [DataMember(Name="senderEmail", EmitDefaultValue=false)]
        public string SenderEmail { get; set; }




        /// <summary>
        /// Vaulting properties that allows Adobe Sign to securely store documents with a vault provider
        /// </summary>
        /// <value>Vaulting properties that allows Adobe Sign to securely store documents with a vault provider</value>
        [DataMember(Name="vaultingInfo", EmitDefaultValue=false)]
        public VaultingInfo VaultingInfo { get; set; }

        /// <summary>
        /// The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.
        /// </summary>
        /// <value>The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.</value>
        [DataMember(Name="workflowId", EmitDefaultValue=false)]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgreementCreationInfo {\n");
            sb.Append("  Ccs: ").Append(Ccs).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DeviceInfo: ").Append(DeviceInfo).Append("\n");
            sb.Append("  DocumentVisibilityEnabled: ").Append(DocumentVisibilityEnabled).Append("\n");
            sb.Append("  EmailOption: ").Append(EmailOption).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  FileInfos: ").Append(FileInfos).Append("\n");
            sb.Append("  FirstReminderDelay: ").Append(FirstReminderDelay).Append("\n");
            sb.Append("  FormFieldLayerTemplates: ").Append(FormFieldLayerTemplates).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MergeFieldInfo: ").Append(MergeFieldInfo).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParticipantSetsInfo: ").Append(ParticipantSetsInfo).Append("\n");
            sb.Append("  PostSignOption: ").Append(PostSignOption).Append("\n");
            sb.Append("  ReminderFrequency: ").Append(ReminderFrequency).Append("\n");
            sb.Append("  SecurityOption: ").Append(SecurityOption).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  SignatureType: ").Append(SignatureType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VaultingInfo: ").Append(VaultingInfo).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgreementCreationInfo);
        }

        /// <summary>
        /// Returns true if AgreementCreationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AgreementCreationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgreementCreationInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ccs == input.Ccs ||
                    this.Ccs != null &&
                    this.Ccs.SequenceEqual(input.Ccs)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.DeviceInfo == input.DeviceInfo ||
                    (this.DeviceInfo != null &&
                    this.DeviceInfo.Equals(input.DeviceInfo))
                ) && 
                (
                    this.DocumentVisibilityEnabled == input.DocumentVisibilityEnabled ||
                    (this.DocumentVisibilityEnabled != null &&
                    this.DocumentVisibilityEnabled.Equals(input.DocumentVisibilityEnabled))
                ) && 
                (
                    this.EmailOption == input.EmailOption ||
                    (this.EmailOption != null &&
                    this.EmailOption.Equals(input.EmailOption))
                ) && 
                (
                    this.ExpirationTime == input.ExpirationTime ||
                    (this.ExpirationTime != null &&
                    this.ExpirationTime.Equals(input.ExpirationTime))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.FileInfos == input.FileInfos ||
                    this.FileInfos != null &&
                    this.FileInfos.SequenceEqual(input.FileInfos)
                ) && 
                (
                    this.FirstReminderDelay == input.FirstReminderDelay ||
                    (this.FirstReminderDelay != null &&
                    this.FirstReminderDelay.Equals(input.FirstReminderDelay))
                ) && 
                (
                    this.FormFieldLayerTemplates == input.FormFieldLayerTemplates ||
                    this.FormFieldLayerTemplates != null &&
                    this.FormFieldLayerTemplates.SequenceEqual(input.FormFieldLayerTemplates)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.MergeFieldInfo == input.MergeFieldInfo ||
                    this.MergeFieldInfo != null &&
                    this.MergeFieldInfo.SequenceEqual(input.MergeFieldInfo)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParticipantSetsInfo == input.ParticipantSetsInfo ||
                    this.ParticipantSetsInfo != null &&
                    this.ParticipantSetsInfo.SequenceEqual(input.ParticipantSetsInfo)
                ) && 
                (
                    this.PostSignOption == input.PostSignOption ||
                    (this.PostSignOption != null &&
                    this.PostSignOption.Equals(input.PostSignOption))
                ) && 
                (
                    this.ReminderFrequency == input.ReminderFrequency ||
                    (this.ReminderFrequency != null &&
                    this.ReminderFrequency.Equals(input.ReminderFrequency))
                ) && 
                (
                    this.SecurityOption == input.SecurityOption ||
                    (this.SecurityOption != null &&
                    this.SecurityOption.Equals(input.SecurityOption))
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                ) && 
                (
                    this.SignatureType == input.SignatureType ||
                    (this.SignatureType != null &&
                    this.SignatureType.Equals(input.SignatureType))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VaultingInfo == input.VaultingInfo ||
                    (this.VaultingInfo != null &&
                    this.VaultingInfo.Equals(input.VaultingInfo))
                ) && 
                (
                    this.WorkflowId == input.WorkflowId ||
                    (this.WorkflowId != null &&
                    this.WorkflowId.Equals(input.WorkflowId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ccs != null)
                    hashCode = hashCode * 59 + this.Ccs.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.DeviceInfo != null)
                    hashCode = hashCode * 59 + this.DeviceInfo.GetHashCode();
                if (this.DocumentVisibilityEnabled != null)
                    hashCode = hashCode * 59 + this.DocumentVisibilityEnabled.GetHashCode();
                if (this.EmailOption != null)
                    hashCode = hashCode * 59 + this.EmailOption.GetHashCode();
                if (this.ExpirationTime != null)
                    hashCode = hashCode * 59 + this.ExpirationTime.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.FileInfos != null)
                    hashCode = hashCode * 59 + this.FileInfos.GetHashCode();
                if (this.FirstReminderDelay != null)
                    hashCode = hashCode * 59 + this.FirstReminderDelay.GetHashCode();
                if (this.FormFieldLayerTemplates != null)
                    hashCode = hashCode * 59 + this.FormFieldLayerTemplates.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.MergeFieldInfo != null)
                    hashCode = hashCode * 59 + this.MergeFieldInfo.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParticipantSetsInfo != null)
                    hashCode = hashCode * 59 + this.ParticipantSetsInfo.GetHashCode();
                if (this.PostSignOption != null)
                    hashCode = hashCode * 59 + this.PostSignOption.GetHashCode();
                if (this.ReminderFrequency != null)
                    hashCode = hashCode * 59 + this.ReminderFrequency.GetHashCode();
                if (this.SecurityOption != null)
                    hashCode = hashCode * 59 + this.SecurityOption.GetHashCode();
                if (this.SenderEmail != null)
                    hashCode = hashCode * 59 + this.SenderEmail.GetHashCode();
                if (this.SignatureType != null)
                    hashCode = hashCode * 59 + this.SignatureType.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VaultingInfo != null)
                    hashCode = hashCode * 59 + this.VaultingInfo.GetHashCode();
                if (this.WorkflowId != null)
                    hashCode = hashCode * 59 + this.WorkflowId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
