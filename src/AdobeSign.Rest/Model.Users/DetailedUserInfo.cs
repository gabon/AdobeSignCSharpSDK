/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AdobeSign.Rest.Model.Users
{
    /// <summary>
    /// DetailedUserInfo
    /// </summary>
    [DataContract]
    public partial class DetailedUserInfo :  IEquatable<DetailedUserInfo>, IValidatableObject
    {
        /// <summary>
        /// Type of account to which the user belongs (null if no account)
        /// </summary>
        /// <value>Type of account to which the user belongs (null if no account)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            
            /// <summary>
            /// Enum FREE for value: FREE
            /// </summary>
            [EnumMember(Value = "FREE")]
            FREE = 1,
            
            /// <summary>
            /// Enum PRO for value: PRO
            /// </summary>
            [EnumMember(Value = "PRO")]
            PRO = 2,
            
            /// <summary>
            /// Enum TEAM for value: TEAM
            /// </summary>
            [EnumMember(Value = "TEAM")]
            TEAM = 3,
            
            /// <summary>
            /// Enum TEAMTRIAL for value: TEAM_TRIAL
            /// </summary>
            [EnumMember(Value = "TEAM_TRIAL")]
            TEAMTRIAL = 4,
            
            /// <summary>
            /// Enum ENTERPRISE for value: ENTERPRISE
            /// </summary>
            [EnumMember(Value = "ENTERPRISE")]
            ENTERPRISE = 5,
            
            /// <summary>
            /// Enum ENTERPRISETRIAL for value: ENTERPRISE_TRIAL
            /// </summary>
            [EnumMember(Value = "ENTERPRISE_TRIAL")]
            ENTERPRISETRIAL = 6,
            
            /// <summary>
            /// Enum GLOBAL for value: GLOBAL
            /// </summary>
            [EnumMember(Value = "GLOBAL")]
            GLOBAL = 7,
            
            /// <summary>
            /// Enum GLOBALTRIAL for value: GLOBAL_TRIAL
            /// </summary>
            [EnumMember(Value = "GLOBAL_TRIAL")]
            GLOBALTRIAL = 8
        }

        /// <summary>
        /// Type of account to which the user belongs (null if no account)
        /// </summary>
        /// <value>Type of account to which the user belongs (null if no account)</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public AccountTypeEnum? AccountType { get; set; }
        /// <summary>
        /// Status of the user
        /// </summary>
        /// <value>Status of the user</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            
            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2,
            
            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 3,
            
            /// <summary>
            /// Enum UNVERIFIED for value: UNVERIFIED
            /// </summary>
            [EnumMember(Value = "UNVERIFIED")]
            UNVERIFIED = 4
        }

        /// <summary>
        /// Status of the user
        /// </summary>
        /// <value>Status of the user</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedUserInfo" /> class.
        /// </summary>
        /// <param name="AccountType">Type of account to which the user belongs (null if no account).</param>
        /// <param name="Company">The name of company of the user.</param>
        /// <param name="Email">The email address of the user.</param>
        /// <param name="FirstName">The first name of the user.</param>
        /// <param name="Id">A unique identifier of the user resource for REST APIs as issued by Sign..</param>
        /// <param name="Initials">The initials of the user.</param>
        /// <param name="IsAccountAdmin">True if the user is account admin.</param>
        /// <param name="LastName">The last name of the user.</param>
        /// <param name="Locale">The UI locale of the user.</param>
        /// <param name="Phone">The phone number of the user.</param>
        /// <param name="Status">Status of the user.</param>
        /// <param name="Title">The job title of the user.</param>
        public DetailedUserInfo(AccountTypeEnum? AccountType = default(AccountTypeEnum?), string Company = default(string), string Email = default(string), string FirstName = default(string), string Id = default(string), string Initials = default(string), bool? IsAccountAdmin = default(bool?), string LastName = default(string), string Locale = default(string), string Phone = default(string), StatusEnum? Status = default(StatusEnum?), string Title = default(string))
        {
            this.AccountType = AccountType;
            this.Company = Company;
            this.Email = Email;
            this.FirstName = FirstName;
            this.Id = Id;
            this.Initials = Initials;
            this.IsAccountAdmin = IsAccountAdmin;
            this.LastName = LastName;
            this.Locale = Locale;
            this.Phone = Phone;
            this.Status = Status;
            this.Title = Title;
        }
        

        /// <summary>
        /// The name of company of the user
        /// </summary>
        /// <value>The name of company of the user</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// The email address of the user
        /// </summary>
        /// <value>The email address of the user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// A unique identifier of the user resource for REST APIs as issued by Sign.
        /// </summary>
        /// <value>A unique identifier of the user resource for REST APIs as issued by Sign.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The initials of the user
        /// </summary>
        /// <value>The initials of the user</value>
        [DataMember(Name="initials", EmitDefaultValue=false)]
        public string Initials { get; set; }

        /// <summary>
        /// True if the user is account admin
        /// </summary>
        /// <value>True if the user is account admin</value>
        [DataMember(Name="isAccountAdmin", EmitDefaultValue=false)]
        public bool? IsAccountAdmin { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The UI locale of the user
        /// </summary>
        /// <value>The UI locale of the user</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// The phone number of the user
        /// </summary>
        /// <value>The phone number of the user</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }


        /// <summary>
        /// The job title of the user
        /// </summary>
        /// <value>The job title of the user</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedUserInfo {\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  IsAccountAdmin: ").Append(IsAccountAdmin).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedUserInfo);
        }

        /// <summary>
        /// Returns true if DetailedUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedUserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Initials == input.Initials ||
                    (this.Initials != null &&
                    this.Initials.Equals(input.Initials))
                ) && 
                (
                    this.IsAccountAdmin == input.IsAccountAdmin ||
                    (this.IsAccountAdmin != null &&
                    this.IsAccountAdmin.Equals(input.IsAccountAdmin))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Initials != null)
                    hashCode = hashCode * 59 + this.Initials.GetHashCode();
                if (this.IsAccountAdmin != null)
                    hashCode = hashCode * 59 + this.IsAccountAdmin.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
