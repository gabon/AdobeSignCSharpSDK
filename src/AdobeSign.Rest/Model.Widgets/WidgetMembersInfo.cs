/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AdobeSign.Rest.Model.Widgets
{
    /// <summary>
    /// WidgetMembersInfo
    /// </summary>
    [DataContract]
    public partial class WidgetMembersInfo :  IEquatable<WidgetMembersInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetMembersInfo" /> class.
        /// </summary>
        /// <param name="AdditionalParticipantSets">Information about the widget additional participant Sets.</param>
        /// <param name="CcsInfo">Information of CC participants of the widget..</param>
        /// <param name="CreatorInfo">Information of the creator of the widget..</param>
        /// <param name="SharesInfo">Information of the participants with whom the widget has been shared..</param>
        /// <param name="WidgetParticipantSet">Information about the widget participant Set.</param>
        public WidgetMembersInfo(List<DetailedWidgetParticipantSetInfo> AdditionalParticipantSets = default(List<DetailedWidgetParticipantSetInfo>), List<CCParticipantInfo> CcsInfo = default(List<CCParticipantInfo>), SenderInfo CreatorInfo = default(SenderInfo), List<ShareParticipantInfo> SharesInfo = default(List<ShareParticipantInfo>), DetailedWidgetParticipantSetInfo WidgetParticipantSet = default(DetailedWidgetParticipantSetInfo))
        {
            this.AdditionalParticipantSets = AdditionalParticipantSets;
            this.CcsInfo = CcsInfo;
            this.CreatorInfo = CreatorInfo;
            this.SharesInfo = SharesInfo;
            this.WidgetParticipantSet = WidgetParticipantSet;
        }
        
        /// <summary>
        /// Information about the widget additional participant Sets
        /// </summary>
        /// <value>Information about the widget additional participant Sets</value>
        [DataMember(Name="additionalParticipantSets", EmitDefaultValue=false)]
        public List<DetailedWidgetParticipantSetInfo> AdditionalParticipantSets { get; set; }

        /// <summary>
        /// Information of CC participants of the widget.
        /// </summary>
        /// <value>Information of CC participants of the widget.</value>
        [DataMember(Name="ccsInfo", EmitDefaultValue=false)]
        public List<CCParticipantInfo> CcsInfo { get; set; }

        /// <summary>
        /// Information of the creator of the widget.
        /// </summary>
        /// <value>Information of the creator of the widget.</value>
        [DataMember(Name="creatorInfo", EmitDefaultValue=false)]
        public SenderInfo CreatorInfo { get; set; }

        /// <summary>
        /// Information of the participants with whom the widget has been shared.
        /// </summary>
        /// <value>Information of the participants with whom the widget has been shared.</value>
        [DataMember(Name="sharesInfo", EmitDefaultValue=false)]
        public List<ShareParticipantInfo> SharesInfo { get; set; }

        /// <summary>
        /// Information about the widget participant Set
        /// </summary>
        /// <value>Information about the widget participant Set</value>
        [DataMember(Name="widgetParticipantSet", EmitDefaultValue=false)]
        public DetailedWidgetParticipantSetInfo WidgetParticipantSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WidgetMembersInfo {\n");
            sb.Append("  AdditionalParticipantSets: ").Append(AdditionalParticipantSets).Append("\n");
            sb.Append("  CcsInfo: ").Append(CcsInfo).Append("\n");
            sb.Append("  CreatorInfo: ").Append(CreatorInfo).Append("\n");
            sb.Append("  SharesInfo: ").Append(SharesInfo).Append("\n");
            sb.Append("  WidgetParticipantSet: ").Append(WidgetParticipantSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WidgetMembersInfo);
        }

        /// <summary>
        /// Returns true if WidgetMembersInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetMembersInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetMembersInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalParticipantSets == input.AdditionalParticipantSets ||
                    this.AdditionalParticipantSets != null &&
                    this.AdditionalParticipantSets.SequenceEqual(input.AdditionalParticipantSets)
                ) && 
                (
                    this.CcsInfo == input.CcsInfo ||
                    this.CcsInfo != null &&
                    this.CcsInfo.SequenceEqual(input.CcsInfo)
                ) && 
                (
                    this.CreatorInfo == input.CreatorInfo ||
                    (this.CreatorInfo != null &&
                    this.CreatorInfo.Equals(input.CreatorInfo))
                ) && 
                (
                    this.SharesInfo == input.SharesInfo ||
                    this.SharesInfo != null &&
                    this.SharesInfo.SequenceEqual(input.SharesInfo)
                ) && 
                (
                    this.WidgetParticipantSet == input.WidgetParticipantSet ||
                    (this.WidgetParticipantSet != null &&
                    this.WidgetParticipantSet.Equals(input.WidgetParticipantSet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalParticipantSets != null)
                    hashCode = hashCode * 59 + this.AdditionalParticipantSets.GetHashCode();
                if (this.CcsInfo != null)
                    hashCode = hashCode * 59 + this.CcsInfo.GetHashCode();
                if (this.CreatorInfo != null)
                    hashCode = hashCode * 59 + this.CreatorInfo.GetHashCode();
                if (this.SharesInfo != null)
                    hashCode = hashCode * 59 + this.SharesInfo.GetHashCode();
                if (this.WidgetParticipantSet != null)
                    hashCode = hashCode * 59 + this.WidgetParticipantSet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
