/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AdobeSign.Rest.Model.Widgets
{
    /// <summary>
    /// DocumentImageUrls
    /// </summary>
    [DataContract]
    public partial class DocumentImageUrls :  IEquatable<DocumentImageUrls>, IValidatableObject
    {
        /// <summary>
        /// ImageSize corresponding to the imageUrl returned 
        /// </summary>
        /// <value>ImageSize corresponding to the imageUrl returned </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImageSizeEnum
        {
            
            /// <summary>
            /// Enum FIXEDWIDTH50px for value: FIXED_WIDTH_50px
            /// </summary>
            [EnumMember(Value = "FIXED_WIDTH_50px")]
            FIXEDWIDTH50px = 1,
            
            /// <summary>
            /// Enum FIXEDWIDTH250px for value: FIXED_WIDTH_250px
            /// </summary>
            [EnumMember(Value = "FIXED_WIDTH_250px")]
            FIXEDWIDTH250px = 2,
            
            /// <summary>
            /// Enum FIXEDWIDTH675px for value: FIXED_WIDTH_675px
            /// </summary>
            [EnumMember(Value = "FIXED_WIDTH_675px")]
            FIXEDWIDTH675px = 3,
            
            /// <summary>
            /// Enum ZOOM50PERCENT for value: ZOOM_50_PERCENT
            /// </summary>
            [EnumMember(Value = "ZOOM_50_PERCENT")]
            ZOOM50PERCENT = 4,
            
            /// <summary>
            /// Enum ZOOM75PERCENT for value: ZOOM_75_PERCENT
            /// </summary>
            [EnumMember(Value = "ZOOM_75_PERCENT")]
            ZOOM75PERCENT = 5,
            
            /// <summary>
            /// Enum ZOOM100PERCENT for value: ZOOM_100_PERCENT
            /// </summary>
            [EnumMember(Value = "ZOOM_100_PERCENT")]
            ZOOM100PERCENT = 6,
            
            /// <summary>
            /// Enum ZOOM125PERCENT for value: ZOOM_125_PERCENT
            /// </summary>
            [EnumMember(Value = "ZOOM_125_PERCENT")]
            ZOOM125PERCENT = 7,
            
            /// <summary>
            /// Enum ZOOM150PERCENT for value: ZOOM_150_PERCENT
            /// </summary>
            [EnumMember(Value = "ZOOM_150_PERCENT")]
            ZOOM150PERCENT = 8,
            
            /// <summary>
            /// Enum ZOOM200PERCENT for value: ZOOM_200_PERCENT
            /// </summary>
            [EnumMember(Value = "ZOOM_200_PERCENT")]
            ZOOM200PERCENT = 9
        }

        /// <summary>
        /// ImageSize corresponding to the imageUrl returned 
        /// </summary>
        /// <value>ImageSize corresponding to the imageUrl returned </value>
        [DataMember(Name="imageSize", EmitDefaultValue=false)]
        public ImageSizeEnum? ImageSize { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentImageUrls" /> class.
        /// </summary>
        /// <param name="ImageSize">ImageSize corresponding to the imageUrl returned .</param>
        /// <param name="ImageURLs">A list of image url (one per page)..</param>
        /// <param name="ImagesAvailable">true if images for the associated image size is available, else false..</param>
        public DocumentImageUrls(ImageSizeEnum? ImageSize = default(ImageSizeEnum?), List<PageImageUrl> ImageURLs = default(List<PageImageUrl>), bool? ImagesAvailable = default(bool?))
        {
            this.ImageSize = ImageSize;
            this.ImageURLs = ImageURLs;
            this.ImagesAvailable = ImagesAvailable;
        }
        

        /// <summary>
        /// A list of image url (one per page).
        /// </summary>
        /// <value>A list of image url (one per page).</value>
        [DataMember(Name="imageURLs", EmitDefaultValue=false)]
        public List<PageImageUrl> ImageURLs { get; set; }

        /// <summary>
        /// true if images for the associated image size is available, else false.
        /// </summary>
        /// <value>true if images for the associated image size is available, else false.</value>
        [DataMember(Name="imagesAvailable", EmitDefaultValue=false)]
        public bool? ImagesAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentImageUrls {\n");
            sb.Append("  ImageSize: ").Append(ImageSize).Append("\n");
            sb.Append("  ImageURLs: ").Append(ImageURLs).Append("\n");
            sb.Append("  ImagesAvailable: ").Append(ImagesAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentImageUrls);
        }

        /// <summary>
        /// Returns true if DocumentImageUrls instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentImageUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentImageUrls input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImageSize == input.ImageSize ||
                    (this.ImageSize != null &&
                    this.ImageSize.Equals(input.ImageSize))
                ) && 
                (
                    this.ImageURLs == input.ImageURLs ||
                    this.ImageURLs != null &&
                    this.ImageURLs.SequenceEqual(input.ImageURLs)
                ) && 
                (
                    this.ImagesAvailable == input.ImagesAvailable ||
                    (this.ImagesAvailable != null &&
                    this.ImagesAvailable.Equals(input.ImagesAvailable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageSize != null)
                    hashCode = hashCode * 59 + this.ImageSize.GetHashCode();
                if (this.ImageURLs != null)
                    hashCode = hashCode * 59 + this.ImageURLs.GetHashCode();
                if (this.ImagesAvailable != null)
                    hashCode = hashCode * 59 + this.ImagesAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
