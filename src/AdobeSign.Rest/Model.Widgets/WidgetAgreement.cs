/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdobeSign.Rest.Client.SwaggerDateConverter;

namespace AdobeSign.Rest.Model.Widgets
{
    /// <summary>
    /// WidgetAgreement
    /// </summary>
    [DataContract]
    public partial class WidgetAgreement :  IEquatable<WidgetAgreement>, IValidatableObject
    {
        /// <summary>
        /// The current status of the document from the perspective of the originator
        /// </summary>
        /// <value>The current status of the document from the perspective of the originator</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum WAITINGFORMYSIGNATURE for value: WAITING_FOR_MY_SIGNATURE
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_MY_SIGNATURE")]
            WAITINGFORMYSIGNATURE = 1,
            
            /// <summary>
            /// Enum WAITINGFORMYAPPROVAL for value: WAITING_FOR_MY_APPROVAL
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_MY_APPROVAL")]
            WAITINGFORMYAPPROVAL = 2,
            
            /// <summary>
            /// Enum WAITINGFORMYDELEGATION for value: WAITING_FOR_MY_DELEGATION
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_MY_DELEGATION")]
            WAITINGFORMYDELEGATION = 3,
            
            /// <summary>
            /// Enum WAITINGFORMYACKNOWLEDGEMENT for value: WAITING_FOR_MY_ACKNOWLEDGEMENT
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_MY_ACKNOWLEDGEMENT")]
            WAITINGFORMYACKNOWLEDGEMENT = 4,
            
            /// <summary>
            /// Enum WAITINGFORMYACCEPTANCE for value: WAITING_FOR_MY_ACCEPTANCE
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_MY_ACCEPTANCE")]
            WAITINGFORMYACCEPTANCE = 5,
            
            /// <summary>
            /// Enum WAITINGFORMYFORMFILLING for value: WAITING_FOR_MY_FORM_FILLING
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_MY_FORM_FILLING")]
            WAITINGFORMYFORMFILLING = 6,
            
            /// <summary>
            /// Enum OUTFORSIGNATURE for value: OUT_FOR_SIGNATURE
            /// </summary>
            [EnumMember(Value = "OUT_FOR_SIGNATURE")]
            OUTFORSIGNATURE = 7,
            
            /// <summary>
            /// Enum OUTFORAPPROVAL for value: OUT_FOR_APPROVAL
            /// </summary>
            [EnumMember(Value = "OUT_FOR_APPROVAL")]
            OUTFORAPPROVAL = 8,
            
            /// <summary>
            /// Enum OUTFORDELIVERY for value: OUT_FOR_DELIVERY
            /// </summary>
            [EnumMember(Value = "OUT_FOR_DELIVERY")]
            OUTFORDELIVERY = 9,
            
            /// <summary>
            /// Enum OUTFORACCEPTANCE for value: OUT_FOR_ACCEPTANCE
            /// </summary>
            [EnumMember(Value = "OUT_FOR_ACCEPTANCE")]
            OUTFORACCEPTANCE = 10,
            
            /// <summary>
            /// Enum OUTFORFORMFILLING for value: OUT_FOR_FORM_FILLING
            /// </summary>
            [EnumMember(Value = "OUT_FOR_FORM_FILLING")]
            OUTFORFORMFILLING = 11,
            
            /// <summary>
            /// Enum SIGNED for value: SIGNED
            /// </summary>
            [EnumMember(Value = "SIGNED")]
            SIGNED = 12,
            
            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 13,
            
            /// <summary>
            /// Enum FORMFILLED for value: FORM_FILLED
            /// </summary>
            [EnumMember(Value = "FORM_FILLED")]
            FORMFILLED = 14,
            
            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 15,
            
            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 16,
            
            /// <summary>
            /// Enum ARCHIVED for value: ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVED = 17,
            
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 18,
            
            /// <summary>
            /// Enum EXPIRED for value: EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED = 19,
            
            /// <summary>
            /// Enum WAITINGFORPREFILL for value: WAITING_FOR_PREFILL
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_PREFILL")]
            WAITINGFORPREFILL = 20,
            
            /// <summary>
            /// Enum DOCUMENTSNOTYETPROCESSED for value: DOCUMENTS_NOT_YET_PROCESSED
            /// </summary>
            [EnumMember(Value = "DOCUMENTS_NOT_YET_PROCESSED")]
            DOCUMENTSNOTYETPROCESSED = 21,
            
            /// <summary>
            /// Enum WAITINGFORMYVERIFICATION for value: WAITING_FOR_MY_VERIFICATION
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_MY_VERIFICATION")]
            WAITINGFORMYVERIFICATION = 22,
            
            /// <summary>
            /// Enum WAITINGFORVERIFICATION for value: WAITING_FOR_VERIFICATION
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_VERIFICATION")]
            WAITINGFORVERIFICATION = 23
        }

        /// <summary>
        /// The current status of the document from the perspective of the originator
        /// </summary>
        /// <value>The current status of the document from the perspective of the originator</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetAgreement" /> class.
        /// </summary>
        /// <param name="DisplayDate">The display date for the agreement. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time.</param>
        /// <param name="DisplayParticipantSetInfos">The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user.</param>
        /// <param name="Id">The unique identifier of the agreement.If provided in POST, it will simply be ignored.</param>
        /// <param name="Esign">True if this is an e-sign document.</param>
        /// <param name="Hidden">True if agreement is hidden for the user.</param>
        /// <param name="LatestVersionId">A version ID which uniquely identifies the current version of the agreement.</param>
        /// <param name="Name">Name of the Agreement.</param>
        /// <param name="Status">The current status of the document from the perspective of the originator.</param>
        public WidgetAgreement(DateTime? DisplayDate = default(DateTime?), List<DisplayWidgetParticipantSetInfo> DisplayParticipantSetInfos = default(List<DisplayWidgetParticipantSetInfo>), string Id = default(string), bool? Esign = default(bool?), bool? Hidden = default(bool?), string LatestVersionId = default(string), string Name = default(string), StatusEnum? Status = default(StatusEnum?))
        {
            this.DisplayDate = DisplayDate;
            this.DisplayParticipantSetInfos = DisplayParticipantSetInfos;
            this.Id = Id;
            this.Esign = Esign;
            this.Hidden = Hidden;
            this.LatestVersionId = LatestVersionId;
            this.Name = Name;
            this.Status = Status;
        }
        
        /// <summary>
        /// The display date for the agreement. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
        /// </summary>
        /// <value>The display date for the agreement. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time</value>
        [DataMember(Name="displayDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DisplayDate { get; set; }

        /// <summary>
        /// The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
        /// </summary>
        /// <value>The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user</value>
        [DataMember(Name="displayParticipantSetInfos", EmitDefaultValue=false)]
        public List<DisplayWidgetParticipantSetInfo> DisplayParticipantSetInfos { get; set; }

        /// <summary>
        /// The unique identifier of the agreement.If provided in POST, it will simply be ignored
        /// </summary>
        /// <value>The unique identifier of the agreement.If provided in POST, it will simply be ignored</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// True if this is an e-sign document
        /// </summary>
        /// <value>True if this is an e-sign document</value>
        [DataMember(Name="esign", EmitDefaultValue=false)]
        public bool? Esign { get; set; }

        /// <summary>
        /// True if agreement is hidden for the user
        /// </summary>
        /// <value>True if agreement is hidden for the user</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// A version ID which uniquely identifies the current version of the agreement
        /// </summary>
        /// <value>A version ID which uniquely identifies the current version of the agreement</value>
        [DataMember(Name="latestVersionId", EmitDefaultValue=false)]
        public string LatestVersionId { get; set; }

        /// <summary>
        /// Name of the Agreement
        /// </summary>
        /// <value>Name of the Agreement</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WidgetAgreement {\n");
            sb.Append("  DisplayDate: ").Append(DisplayDate).Append("\n");
            sb.Append("  DisplayParticipantSetInfos: ").Append(DisplayParticipantSetInfos).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Esign: ").Append(Esign).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  LatestVersionId: ").Append(LatestVersionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WidgetAgreement);
        }

        /// <summary>
        /// Returns true if WidgetAgreement instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetAgreement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetAgreement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayDate == input.DisplayDate ||
                    (this.DisplayDate != null &&
                    this.DisplayDate.Equals(input.DisplayDate))
                ) && 
                (
                    this.DisplayParticipantSetInfos == input.DisplayParticipantSetInfos ||
                    this.DisplayParticipantSetInfos != null &&
                    this.DisplayParticipantSetInfos.SequenceEqual(input.DisplayParticipantSetInfos)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Esign == input.Esign ||
                    (this.Esign != null &&
                    this.Esign.Equals(input.Esign))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.LatestVersionId == input.LatestVersionId ||
                    (this.LatestVersionId != null &&
                    this.LatestVersionId.Equals(input.LatestVersionId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayDate != null)
                    hashCode = hashCode * 59 + this.DisplayDate.GetHashCode();
                if (this.DisplayParticipantSetInfos != null)
                    hashCode = hashCode * 59 + this.DisplayParticipantSetInfos.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Esign != null)
                    hashCode = hashCode * 59 + this.Esign.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.LatestVersionId != null)
                    hashCode = hashCode * 59 + this.LatestVersionId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
