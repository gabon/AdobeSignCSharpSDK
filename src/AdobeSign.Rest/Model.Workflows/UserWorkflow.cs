/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdobeSign.Rest.Client.SwaggerDateConverter;

namespace AdobeSign.Rest.Model.Workflows
{
    /// <summary>
    /// UserWorkflow
    /// </summary>
    [DataContract]
    public partial class UserWorkflow :  IEquatable<UserWorkflow>, IValidatableObject
    {
        /// <summary>
        /// The workflow scope (ACCOUNT or GROUP or OTHER)
        /// </summary>
        /// <value>The workflow scope (ACCOUNT or GROUP or OTHER)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum ACCOUNT for value: ACCOUNT
            /// </summary>
            [EnumMember(Value = "ACCOUNT")]
            ACCOUNT = 1,
            
            /// <summary>
            /// Enum GROUP for value: GROUP
            /// </summary>
            [EnumMember(Value = "GROUP")]
            GROUP = 2
        }

        /// <summary>
        /// The workflow scope (ACCOUNT or GROUP or OTHER)
        /// </summary>
        /// <value>The workflow scope (ACCOUNT or GROUP or OTHER)</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)
        /// </summary>
        /// <value>The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 2,
            
            /// <summary>
            /// Enum HIDDEN for value: HIDDEN
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN = 3
        }

        /// <summary>
        /// The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)
        /// </summary>
        /// <value>The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserWorkflow" /> class.
        /// </summary>
        /// <param name="Created">The date on which the workflow was created. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time.</param>
        /// <param name="Description">Description provided for this workflow at the time of its creation.</param>
        /// <param name="DisplayName">The display name of the workflow..</param>
        /// <param name="Id">The unique identifier of a workflow.</param>
        /// <param name="Name">The name of the workflow..</param>
        /// <param name="Scope">The workflow scope (ACCOUNT or GROUP or OTHER).</param>
        /// <param name="ScopeId">Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId..</param>
        /// <param name="Status">The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER).</param>
        public UserWorkflow(DateTime? Created = default(DateTime?), string Description = default(string), string DisplayName = default(string), string Id = default(string), string Name = default(string), ScopeEnum? Scope = default(ScopeEnum?), string ScopeId = default(string), StatusEnum? Status = default(StatusEnum?))
        {
            this.Created = Created;
            this.Description = Description;
            this.DisplayName = DisplayName;
            this.Id = Id;
            this.Name = Name;
            this.Scope = Scope;
            this.ScopeId = ScopeId;
            this.Status = Status;
        }
        
        /// <summary>
        /// The date on which the workflow was created. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
        /// </summary>
        /// <value>The date on which the workflow was created. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Description provided for this workflow at the time of its creation
        /// </summary>
        /// <value>Description provided for this workflow at the time of its creation</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The display name of the workflow.
        /// </summary>
        /// <value>The display name of the workflow.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The unique identifier of a workflow
        /// </summary>
        /// <value>The unique identifier of a workflow</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        /// <value>The name of the workflow.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
        /// </summary>
        /// <value>Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.</value>
        [DataMember(Name="scopeId", EmitDefaultValue=false)]
        public string ScopeId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWorkflow {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserWorkflow);
        }

        /// <summary>
        /// Returns true if UserWorkflow instances are equal
        /// </summary>
        /// <param name="input">Instance of UserWorkflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWorkflow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
