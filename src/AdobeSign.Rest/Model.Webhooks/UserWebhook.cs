/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = AdobeSign.Rest.Client.SwaggerDateConverter;

namespace AdobeSign.Rest.Model.Webhooks
{
    /// <summary>
    /// UserWebhook
    /// </summary>
    [DataContract]
    public partial class UserWebhook :  IEquatable<UserWebhook>, IValidatableObject
    {
        /// <summary>
        /// The resource for which you want to create webhook. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request. The possible values are AGREEMENT, WIDGET,  MEGASIGN AND LIBRARY_DOCUMENT
        /// </summary>
        /// <value>The resource for which you want to create webhook. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request. The possible values are AGREEMENT, WIDGET,  MEGASIGN AND LIBRARY_DOCUMENT</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            
            /// <summary>
            /// Enum AGREEMENT for value: AGREEMENT
            /// </summary>
            [EnumMember(Value = "AGREEMENT")]
            AGREEMENT = 1,
            
            /// <summary>
            /// Enum WIDGET for value: WIDGET
            /// </summary>
            [EnumMember(Value = "WIDGET")]
            WIDGET = 2,
            
            /// <summary>
            /// Enum MEGASIGN for value: MEGASIGN
            /// </summary>
            [EnumMember(Value = "MEGASIGN")]
            MEGASIGN = 3,
            
            /// <summary>
            /// Enum LIBRARYDOCUMENT for value: LIBRARY_DOCUMENT
            /// </summary>
            [EnumMember(Value = "LIBRARY_DOCUMENT")]
            LIBRARYDOCUMENT = 4
        }

        /// <summary>
        /// The resource for which you want to create webhook. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request. The possible values are AGREEMENT, WIDGET,  MEGASIGN AND LIBRARY_DOCUMENT
        /// </summary>
        /// <value>The resource for which you want to create webhook. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request. The possible values are AGREEMENT, WIDGET,  MEGASIGN AND LIBRARY_DOCUMENT</value>
        [DataMember(Name="resourceType", EmitDefaultValue=false)]
        public ResourceTypeEnum? ResourceType { get; set; }
        /// <summary>
        /// Scope of webhook. Can&#39;t be modified in PUT request. The possible values are ACCOUNT, GROUP, USER or RESOURCE
        /// </summary>
        /// <value>Scope of webhook. Can&#39;t be modified in PUT request. The possible values are ACCOUNT, GROUP, USER or RESOURCE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum ACCOUNT for value: ACCOUNT
            /// </summary>
            [EnumMember(Value = "ACCOUNT")]
            ACCOUNT = 1,
            
            /// <summary>
            /// Enum GROUP for value: GROUP
            /// </summary>
            [EnumMember(Value = "GROUP")]
            GROUP = 2,
            
            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 3,
            
            /// <summary>
            /// Enum RESOURCE for value: RESOURCE
            /// </summary>
            [EnumMember(Value = "RESOURCE")]
            RESOURCE = 4
        }

        /// <summary>
        /// Scope of webhook. Can&#39;t be modified in PUT request. The possible values are ACCOUNT, GROUP, USER or RESOURCE
        /// </summary>
        /// <value>Scope of webhook. Can&#39;t be modified in PUT request. The possible values are ACCOUNT, GROUP, USER or RESOURCE</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Status of the webhook. Determines whether the webhook will be actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive event requests. If INACTIVE, this webhook will not receive event requests. Can&#39;t provide status in POST/PUT requests.
        /// </summary>
        /// <value>Status of the webhook. Determines whether the webhook will be actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive event requests. If INACTIVE, this webhook will not receive event requests. Can&#39;t provide status in POST/PUT requests.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,
            
            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2
        }

        /// <summary>
        /// Status of the webhook. Determines whether the webhook will be actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive event requests. If INACTIVE, this webhook will not receive event requests. Can&#39;t provide status in POST/PUT requests.
        /// </summary>
        /// <value>Status of the webhook. Determines whether the webhook will be actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive event requests. If INACTIVE, this webhook will not receive event requests. Can&#39;t provide status in POST/PUT requests.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines WebhookSubscriptionEvents
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebhookSubscriptionEventsEnum
        {
            
            /// <summary>
            /// Enum AGREEMENTCREATED for value: AGREEMENT_CREATED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_CREATED")]
            AGREEMENTCREATED = 1,
            
            /// <summary>
            /// Enum AGREEMENTACTIONDELEGATED for value: AGREEMENT_ACTION_DELEGATED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_ACTION_DELEGATED")]
            AGREEMENTACTIONDELEGATED = 2,
            
            /// <summary>
            /// Enum AGREEMENTRECALLED for value: AGREEMENT_RECALLED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_RECALLED")]
            AGREEMENTRECALLED = 3,
            
            /// <summary>
            /// Enum AGREEMENTREJECTED for value: AGREEMENT_REJECTED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_REJECTED")]
            AGREEMENTREJECTED = 4,
            
            /// <summary>
            /// Enum AGREEMENTEXPIRED for value: AGREEMENT_EXPIRED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_EXPIRED")]
            AGREEMENTEXPIRED = 5,
            
            /// <summary>
            /// Enum AGREEMENTACTIONCOMPLETED for value: AGREEMENT_ACTION_COMPLETED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_ACTION_COMPLETED")]
            AGREEMENTACTIONCOMPLETED = 6,
            
            /// <summary>
            /// Enum AGREEMENTWORKFLOWCOMPLETED for value: AGREEMENT_WORKFLOW_COMPLETED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_WORKFLOW_COMPLETED")]
            AGREEMENTWORKFLOWCOMPLETED = 7,
            
            /// <summary>
            /// Enum AGREEMENTEMAILVIEWED for value: AGREEMENT_EMAIL_VIEWED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_EMAIL_VIEWED")]
            AGREEMENTEMAILVIEWED = 8,
            
            /// <summary>
            /// Enum AGREEMENTMODIFIED for value: AGREEMENT_MODIFIED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_MODIFIED")]
            AGREEMENTMODIFIED = 9,
            
            /// <summary>
            /// Enum AGREEMENTSHARED for value: AGREEMENT_SHARED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_SHARED")]
            AGREEMENTSHARED = 10,
            
            /// <summary>
            /// Enum AGREEMENTVAULTED for value: AGREEMENT_VAULTED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_VAULTED")]
            AGREEMENTVAULTED = 11,
            
            /// <summary>
            /// Enum AGREEMENTACTIONREQUESTED for value: AGREEMENT_ACTION_REQUESTED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_ACTION_REQUESTED")]
            AGREEMENTACTIONREQUESTED = 12,
            
            /// <summary>
            /// Enum AGREEMENTACTIONREPLACEDSIGNER for value: AGREEMENT_ACTION_REPLACED_SIGNER
            /// </summary>
            [EnumMember(Value = "AGREEMENT_ACTION_REPLACED_SIGNER")]
            AGREEMENTACTIONREPLACEDSIGNER = 13,
            
            /// <summary>
            /// Enum AGREEMENTAUTOCANCELLEDCONVERSIONPROBLEM for value: AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM
            /// </summary>
            [EnumMember(Value = "AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM")]
            AGREEMENTAUTOCANCELLEDCONVERSIONPROBLEM = 14,
            
            /// <summary>
            /// Enum AGREEMENTDOCUMENTSDELETED for value: AGREEMENT_DOCUMENTS_DELETED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_DOCUMENTS_DELETED")]
            AGREEMENTDOCUMENTSDELETED = 15,
            
            /// <summary>
            /// Enum AGREEMENTEMAILBOUNCED for value: AGREEMENT_EMAIL_BOUNCED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_EMAIL_BOUNCED")]
            AGREEMENTEMAILBOUNCED = 16,
            
            /// <summary>
            /// Enum AGREEMENTKBAAUTHENTICATED for value: AGREEMENT_KBA_AUTHENTICATED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_KBA_AUTHENTICATED")]
            AGREEMENTKBAAUTHENTICATED = 17,
            
            /// <summary>
            /// Enum AGREEMENTOFFLINESYNC for value: AGREEMENT_OFFLINE_SYNC
            /// </summary>
            [EnumMember(Value = "AGREEMENT_OFFLINE_SYNC")]
            AGREEMENTOFFLINESYNC = 18,
            
            /// <summary>
            /// Enum AGREEMENTUSERACKAGREEMENTMODIFIED for value: AGREEMENT_USER_ACK_AGREEMENT_MODIFIED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_USER_ACK_AGREEMENT_MODIFIED")]
            AGREEMENTUSERACKAGREEMENTMODIFIED = 19,
            
            /// <summary>
            /// Enum AGREEMENTUPLOADEDBYSENDER for value: AGREEMENT_UPLOADED_BY_SENDER
            /// </summary>
            [EnumMember(Value = "AGREEMENT_UPLOADED_BY_SENDER")]
            AGREEMENTUPLOADEDBYSENDER = 20,
            
            /// <summary>
            /// Enum AGREEMENTWEBIDENTITYAUTHENTICATED for value: AGREEMENT_WEB_IDENTITY_AUTHENTICATED
            /// </summary>
            [EnumMember(Value = "AGREEMENT_WEB_IDENTITY_AUTHENTICATED")]
            AGREEMENTWEBIDENTITYAUTHENTICATED = 21,
            
            /// <summary>
            /// Enum AGREEMENTALL for value: AGREEMENT_ALL
            /// </summary>
            [EnumMember(Value = "AGREEMENT_ALL")]
            AGREEMENTALL = 22,
            
            /// <summary>
            /// Enum MEGASIGNCREATED for value: MEGASIGN_CREATED
            /// </summary>
            [EnumMember(Value = "MEGASIGN_CREATED")]
            MEGASIGNCREATED = 23,
            
            /// <summary>
            /// Enum MEGASIGNRECALLED for value: MEGASIGN_RECALLED
            /// </summary>
            [EnumMember(Value = "MEGASIGN_RECALLED")]
            MEGASIGNRECALLED = 24,
            
            /// <summary>
            /// Enum MEGASIGNSHARED for value: MEGASIGN_SHARED
            /// </summary>
            [EnumMember(Value = "MEGASIGN_SHARED")]
            MEGASIGNSHARED = 25,
            
            /// <summary>
            /// Enum MEGASIGNALL for value: MEGASIGN_ALL
            /// </summary>
            [EnumMember(Value = "MEGASIGN_ALL")]
            MEGASIGNALL = 26,
            
            /// <summary>
            /// Enum WIDGETCREATED for value: WIDGET_CREATED
            /// </summary>
            [EnumMember(Value = "WIDGET_CREATED")]
            WIDGETCREATED = 27,
            
            /// <summary>
            /// Enum WIDGETMODIFIED for value: WIDGET_MODIFIED
            /// </summary>
            [EnumMember(Value = "WIDGET_MODIFIED")]
            WIDGETMODIFIED = 28,
            
            /// <summary>
            /// Enum WIDGETSHARED for value: WIDGET_SHARED
            /// </summary>
            [EnumMember(Value = "WIDGET_SHARED")]
            WIDGETSHARED = 29,
            
            /// <summary>
            /// Enum WIDGETENABLED for value: WIDGET_ENABLED
            /// </summary>
            [EnumMember(Value = "WIDGET_ENABLED")]
            WIDGETENABLED = 30,
            
            /// <summary>
            /// Enum WIDGETDISABLED for value: WIDGET_DISABLED
            /// </summary>
            [EnumMember(Value = "WIDGET_DISABLED")]
            WIDGETDISABLED = 31,
            
            /// <summary>
            /// Enum WIDGETAUTOCANCELLEDCONVERSIONPROBLEM for value: WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM
            /// </summary>
            [EnumMember(Value = "WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM")]
            WIDGETAUTOCANCELLEDCONVERSIONPROBLEM = 32,
            
            /// <summary>
            /// Enum WIDGETALL for value: WIDGET_ALL
            /// </summary>
            [EnumMember(Value = "WIDGET_ALL")]
            WIDGETALL = 33,
            
            /// <summary>
            /// Enum LIBRARYDOCUMENTCREATED for value: LIBRARY_DOCUMENT_CREATED
            /// </summary>
            [EnumMember(Value = "LIBRARY_DOCUMENT_CREATED")]
            LIBRARYDOCUMENTCREATED = 34,
            
            /// <summary>
            /// Enum LIBRARYDOCUMENTAUTOCANCELLEDCONVERSIONPROBLEM for value: LIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM
            /// </summary>
            [EnumMember(Value = "LIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM")]
            LIBRARYDOCUMENTAUTOCANCELLEDCONVERSIONPROBLEM = 35,
            
            /// <summary>
            /// Enum LIBRARYDOCUMENTMODIFIED for value: LIBRARY_DOCUMENT_MODIFIED
            /// </summary>
            [EnumMember(Value = "LIBRARY_DOCUMENT_MODIFIED")]
            LIBRARYDOCUMENTMODIFIED = 36,
            
            /// <summary>
            /// Enum LIBRARYDOCUMENTALL for value: LIBRARY_DOCUMENT_ALL
            /// </summary>
            [EnumMember(Value = "LIBRARY_DOCUMENT_ALL")]
            LIBRARYDOCUMENTALL = 37
        }


        /// <summary>
        /// Determines events for which the webhook is triggered. The possible values are &lt;br&gt; AGREEMENT_CREATED : When an agreement is created &lt;br&gt;, AGREEMENT_ACTION_DELEGATED : When an agreement is delegated &lt;br&gt;, AGREEMENT_RECALLED : When an agreement is recalled &lt;br&gt;, AGREEMENT_REJECTED : When an agreement is rejected &lt;br&gt;, AGREEMENT_EXPIRED : When an agreement expires &lt;br&gt;, AGREEMENT_ACTION_COMPLETED : When an agreement action is completed &lt;br&gt;, AGREEMENT_WORKFLOW_COMPLETED : When an agreement workflow is completed &lt;br&gt;, AGREEMENT_EMAIL_VIEWED : When an agreement&#39;s email is viewed &lt;br&gt;, AGREEMENT_MODIFIED : When an agreement is modified &lt;br&gt;, AGREEMENT_SHARED : When an agreement is shared &lt;br&gt;, AGREEMENT_VAULTED : When an agreement is vaulted &lt;br&gt;, AGREEMENT_ACTION_REQUESTED : When an agreement action is requested &lt;br&gt;, AGREEMENT_ACTION_REPLACED_SIGNER : When signer is replaced for an agreement &lt;br&gt;, AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When an agreement is auto-cancelled due to conversion problem &lt;br&gt;, AGREEMENT_DOCUMENTS_DELETED : When an agreement documents are deleted &lt;br&gt;, AGREEMENT_EMAIL_BOUNCED : When an agreement email gets bounced &lt;br&gt;, AGREEMENT_KBA_AUTHENTICATED : When an agreement KBA is authenticated &lt;br&gt;, AGREEMENT_OFFLINE_SYNC : When an agreement is synced offline &lt;br&gt;, AGREEMENT_USER_ACK_AGREEMENT_MODIFIED : User Acknowledgement when an agreement is modified &lt;br&gt;, AGREEMENT_UPLOADED_BY_SENDER : When an agreement is uploaded by sender &lt;br&gt;, AGREEMENT_WEB_IDENTITY_AUTHENTICATED : When an agreement web identity is authenticated &lt;br&gt;, AGREEMENT_ALL : All the supported agreement events for Webhooks &lt;br&gt;, MEGASIGN_CREATED : When a megaSign is created &lt;br&gt;, MEGASIGN_RECALLED : When a megaSign is recalled &lt;br&gt;, MEGASIGN_SHARED : When a megaSign is shared &lt;br&gt;, MEGASIGN_ALL : All the supported megaSign events for Webhooks &lt;br&gt;, WIDGET_CREATED : When a widget is created &lt;br&gt;, WIDGET_MODIFIED : When a widget is modified &lt;br&gt;, WIDGET_SHARED : When a widget is shared &lt;br&gt;, WIDGET_ENABLED : When a widget is enabled &lt;br&gt;, WIDGET_DISABLED : When a widget is disabled &lt;br&gt;, WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM : When a widget is auto-cancelled due to conversion problem &lt;br&gt;, WIDGET_ALL : All the supported widget events for Webhooks &lt;br&gt;, LIBRARY_DOCUMENT_CREATED : When a library document  is created &lt;br&gt;, LIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When a library document is auto-cancelled due to conversion problem &lt;br&gt;, LIBRARY_DOCUMENT_MODIFIED : When a library document is modified &lt;br&gt;, LIBRARY_DOCUMENT_ALL : All the supported library document  events for Webhooks
        /// </summary>
        /// <value>Determines events for which the webhook is triggered. The possible values are &lt;br&gt; AGREEMENT_CREATED : When an agreement is created &lt;br&gt;, AGREEMENT_ACTION_DELEGATED : When an agreement is delegated &lt;br&gt;, AGREEMENT_RECALLED : When an agreement is recalled &lt;br&gt;, AGREEMENT_REJECTED : When an agreement is rejected &lt;br&gt;, AGREEMENT_EXPIRED : When an agreement expires &lt;br&gt;, AGREEMENT_ACTION_COMPLETED : When an agreement action is completed &lt;br&gt;, AGREEMENT_WORKFLOW_COMPLETED : When an agreement workflow is completed &lt;br&gt;, AGREEMENT_EMAIL_VIEWED : When an agreement&#39;s email is viewed &lt;br&gt;, AGREEMENT_MODIFIED : When an agreement is modified &lt;br&gt;, AGREEMENT_SHARED : When an agreement is shared &lt;br&gt;, AGREEMENT_VAULTED : When an agreement is vaulted &lt;br&gt;, AGREEMENT_ACTION_REQUESTED : When an agreement action is requested &lt;br&gt;, AGREEMENT_ACTION_REPLACED_SIGNER : When signer is replaced for an agreement &lt;br&gt;, AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When an agreement is auto-cancelled due to conversion problem &lt;br&gt;, AGREEMENT_DOCUMENTS_DELETED : When an agreement documents are deleted &lt;br&gt;, AGREEMENT_EMAIL_BOUNCED : When an agreement email gets bounced &lt;br&gt;, AGREEMENT_KBA_AUTHENTICATED : When an agreement KBA is authenticated &lt;br&gt;, AGREEMENT_OFFLINE_SYNC : When an agreement is synced offline &lt;br&gt;, AGREEMENT_USER_ACK_AGREEMENT_MODIFIED : User Acknowledgement when an agreement is modified &lt;br&gt;, AGREEMENT_UPLOADED_BY_SENDER : When an agreement is uploaded by sender &lt;br&gt;, AGREEMENT_WEB_IDENTITY_AUTHENTICATED : When an agreement web identity is authenticated &lt;br&gt;, AGREEMENT_ALL : All the supported agreement events for Webhooks &lt;br&gt;, MEGASIGN_CREATED : When a megaSign is created &lt;br&gt;, MEGASIGN_RECALLED : When a megaSign is recalled &lt;br&gt;, MEGASIGN_SHARED : When a megaSign is shared &lt;br&gt;, MEGASIGN_ALL : All the supported megaSign events for Webhooks &lt;br&gt;, WIDGET_CREATED : When a widget is created &lt;br&gt;, WIDGET_MODIFIED : When a widget is modified &lt;br&gt;, WIDGET_SHARED : When a widget is shared &lt;br&gt;, WIDGET_ENABLED : When a widget is enabled &lt;br&gt;, WIDGET_DISABLED : When a widget is disabled &lt;br&gt;, WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM : When a widget is auto-cancelled due to conversion problem &lt;br&gt;, WIDGET_ALL : All the supported widget events for Webhooks &lt;br&gt;, LIBRARY_DOCUMENT_CREATED : When a library document  is created &lt;br&gt;, LIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When a library document is auto-cancelled due to conversion problem &lt;br&gt;, LIBRARY_DOCUMENT_MODIFIED : When a library document is modified &lt;br&gt;, LIBRARY_DOCUMENT_ALL : All the supported library document  events for Webhooks</value>
        [DataMember(Name="webhookSubscriptionEvents", EmitDefaultValue=false)]
        public List<WebhookSubscriptionEventsEnum> WebhookSubscriptionEvents { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserWebhook" /> class.
        /// </summary>
        /// <param name="ApplicationDisplayName">The display name of the application through which webhook is created.</param>
        /// <param name="ApplicationName">The name of the application through which webhook is created.</param>
        /// <param name="Id">The unique identifier of the webhook. Will only be returned in GET request. Can&#39;t be modified in PUT request.</param>
        /// <param name="LastModified">Timestamp when the webhook was last updated. Will only be returned in GET request. Can&#39;t be modified in PUT request.</param>
        /// <param name="Name">The name of the webhook.</param>
        /// <param name="ResourceId">Id of the resource type for which you want to create webhook. Provide agreementId if webhook needs to be created for an agreement. Similarly, widgetId if webhook needs to be created for a widget, megaSignId if webhook needs to be created for a megaSign and libraryDocumentId if webhook needs to be created for a library document. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request.</param>
        /// <param name="ResourceType">The resource for which you want to create webhook. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request. The possible values are AGREEMENT, WIDGET,  MEGASIGN AND LIBRARY_DOCUMENT.</param>
        /// <param name="Scope">Scope of webhook. Can&#39;t be modified in PUT request. The possible values are ACCOUNT, GROUP, USER or RESOURCE.</param>
        /// <param name="Status">Status of the webhook. Determines whether the webhook will be actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive event requests. If INACTIVE, this webhook will not receive event requests. Can&#39;t provide status in POST/PUT requests..</param>
        /// <param name="WebhookSubscriptionEvents">Determines events for which the webhook is triggered. The possible values are &lt;br&gt; AGREEMENT_CREATED : When an agreement is created &lt;br&gt;, AGREEMENT_ACTION_DELEGATED : When an agreement is delegated &lt;br&gt;, AGREEMENT_RECALLED : When an agreement is recalled &lt;br&gt;, AGREEMENT_REJECTED : When an agreement is rejected &lt;br&gt;, AGREEMENT_EXPIRED : When an agreement expires &lt;br&gt;, AGREEMENT_ACTION_COMPLETED : When an agreement action is completed &lt;br&gt;, AGREEMENT_WORKFLOW_COMPLETED : When an agreement workflow is completed &lt;br&gt;, AGREEMENT_EMAIL_VIEWED : When an agreement&#39;s email is viewed &lt;br&gt;, AGREEMENT_MODIFIED : When an agreement is modified &lt;br&gt;, AGREEMENT_SHARED : When an agreement is shared &lt;br&gt;, AGREEMENT_VAULTED : When an agreement is vaulted &lt;br&gt;, AGREEMENT_ACTION_REQUESTED : When an agreement action is requested &lt;br&gt;, AGREEMENT_ACTION_REPLACED_SIGNER : When signer is replaced for an agreement &lt;br&gt;, AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When an agreement is auto-cancelled due to conversion problem &lt;br&gt;, AGREEMENT_DOCUMENTS_DELETED : When an agreement documents are deleted &lt;br&gt;, AGREEMENT_EMAIL_BOUNCED : When an agreement email gets bounced &lt;br&gt;, AGREEMENT_KBA_AUTHENTICATED : When an agreement KBA is authenticated &lt;br&gt;, AGREEMENT_OFFLINE_SYNC : When an agreement is synced offline &lt;br&gt;, AGREEMENT_USER_ACK_AGREEMENT_MODIFIED : User Acknowledgement when an agreement is modified &lt;br&gt;, AGREEMENT_UPLOADED_BY_SENDER : When an agreement is uploaded by sender &lt;br&gt;, AGREEMENT_WEB_IDENTITY_AUTHENTICATED : When an agreement web identity is authenticated &lt;br&gt;, AGREEMENT_ALL : All the supported agreement events for Webhooks &lt;br&gt;, MEGASIGN_CREATED : When a megaSign is created &lt;br&gt;, MEGASIGN_RECALLED : When a megaSign is recalled &lt;br&gt;, MEGASIGN_SHARED : When a megaSign is shared &lt;br&gt;, MEGASIGN_ALL : All the supported megaSign events for Webhooks &lt;br&gt;, WIDGET_CREATED : When a widget is created &lt;br&gt;, WIDGET_MODIFIED : When a widget is modified &lt;br&gt;, WIDGET_SHARED : When a widget is shared &lt;br&gt;, WIDGET_ENABLED : When a widget is enabled &lt;br&gt;, WIDGET_DISABLED : When a widget is disabled &lt;br&gt;, WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM : When a widget is auto-cancelled due to conversion problem &lt;br&gt;, WIDGET_ALL : All the supported widget events for Webhooks &lt;br&gt;, LIBRARY_DOCUMENT_CREATED : When a library document  is created &lt;br&gt;, LIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When a library document is auto-cancelled due to conversion problem &lt;br&gt;, LIBRARY_DOCUMENT_MODIFIED : When a library document is modified &lt;br&gt;, LIBRARY_DOCUMENT_ALL : All the supported library document  events for Webhooks.</param>
        /// <param name="WebhookUrlInfo">Info of webhook url.</param>
        public UserWebhook(string ApplicationDisplayName = default(string), string ApplicationName = default(string), string Id = default(string), DateTime? LastModified = default(DateTime?), string Name = default(string), string ResourceId = default(string), ResourceTypeEnum? ResourceType = default(ResourceTypeEnum?), ScopeEnum? Scope = default(ScopeEnum?), StatusEnum? Status = default(StatusEnum?), List<WebhookSubscriptionEventsEnum> WebhookSubscriptionEvents = default(List<WebhookSubscriptionEventsEnum>), WebhookUrlInfo WebhookUrlInfo = default(WebhookUrlInfo))
        {
            this.ApplicationDisplayName = ApplicationDisplayName;
            this.ApplicationName = ApplicationName;
            this.Id = Id;
            this.LastModified = LastModified;
            this.Name = Name;
            this.ResourceId = ResourceId;
            this.ResourceType = ResourceType;
            this.Scope = Scope;
            this.Status = Status;
            this.WebhookSubscriptionEvents = WebhookSubscriptionEvents;
            this.WebhookUrlInfo = WebhookUrlInfo;
        }
        
        /// <summary>
        /// The display name of the application through which webhook is created
        /// </summary>
        /// <value>The display name of the application through which webhook is created</value>
        [DataMember(Name="applicationDisplayName", EmitDefaultValue=false)]
        public string ApplicationDisplayName { get; set; }

        /// <summary>
        /// The name of the application through which webhook is created
        /// </summary>
        /// <value>The name of the application through which webhook is created</value>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// The unique identifier of the webhook. Will only be returned in GET request. Can&#39;t be modified in PUT request
        /// </summary>
        /// <value>The unique identifier of the webhook. Will only be returned in GET request. Can&#39;t be modified in PUT request</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Timestamp when the webhook was last updated. Will only be returned in GET request. Can&#39;t be modified in PUT request
        /// </summary>
        /// <value>Timestamp when the webhook was last updated. Will only be returned in GET request. Can&#39;t be modified in PUT request</value>
        [DataMember(Name="lastModified", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastModified { get; set; }

        /// <summary>
        /// The name of the webhook
        /// </summary>
        /// <value>The name of the webhook</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Id of the resource type for which you want to create webhook. Provide agreementId if webhook needs to be created for an agreement. Similarly, widgetId if webhook needs to be created for a widget, megaSignId if webhook needs to be created for a megaSign and libraryDocumentId if webhook needs to be created for a library document. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request
        /// </summary>
        /// <value>Id of the resource type for which you want to create webhook. Provide agreementId if webhook needs to be created for an agreement. Similarly, widgetId if webhook needs to be created for a widget, megaSignId if webhook needs to be created for a megaSign and libraryDocumentId if webhook needs to be created for a library document. Need to specify only if scope is &#39;RESOURCE&#39;. Can&#39;t be modified in PUT request</value>
        [DataMember(Name="resourceId", EmitDefaultValue=false)]
        public string ResourceId { get; set; }





        /// <summary>
        /// Info of webhook url
        /// </summary>
        /// <value>Info of webhook url</value>
        [DataMember(Name="webhookUrlInfo", EmitDefaultValue=false)]
        public WebhookUrlInfo WebhookUrlInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWebhook {\n");
            sb.Append("  ApplicationDisplayName: ").Append(ApplicationDisplayName).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WebhookSubscriptionEvents: ").Append(WebhookSubscriptionEvents).Append("\n");
            sb.Append("  WebhookUrlInfo: ").Append(WebhookUrlInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserWebhook);
        }

        /// <summary>
        /// Returns true if UserWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of UserWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWebhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationDisplayName == input.ApplicationDisplayName ||
                    (this.ApplicationDisplayName != null &&
                    this.ApplicationDisplayName.Equals(input.ApplicationDisplayName))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.WebhookSubscriptionEvents == input.WebhookSubscriptionEvents ||
                    this.WebhookSubscriptionEvents != null &&
                    this.WebhookSubscriptionEvents.SequenceEqual(input.WebhookSubscriptionEvents)
                ) && 
                (
                    this.WebhookUrlInfo == input.WebhookUrlInfo ||
                    (this.WebhookUrlInfo != null &&
                    this.WebhookUrlInfo.Equals(input.WebhookUrlInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationDisplayName != null)
                    hashCode = hashCode * 59 + this.ApplicationDisplayName.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ResourceId != null)
                    hashCode = hashCode * 59 + this.ResourceId.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.WebhookSubscriptionEvents != null)
                    hashCode = hashCode * 59 + this.WebhookSubscriptionEvents.GetHashCode();
                if (this.WebhookUrlInfo != null)
                    hashCode = hashCode * 59 + this.WebhookUrlInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
