/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AdobeSign.Rest.Model.Webhooks
{
    /// <summary>
    /// UserWebhooks
    /// </summary>
    [DataContract]
    public partial class UserWebhooks :  IEquatable<UserWebhooks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserWebhooks" /> class.
        /// </summary>
        /// <param name="Page">Pagination information for navigating through the response.</param>
        /// <param name="UserWebhookList">An array of widget items.</param>
        public UserWebhooks(PageInfo Page = default(PageInfo), List<UserWebhook> UserWebhookList = default(List<UserWebhook>))
        {
            this.Page = Page;
            this.UserWebhookList = UserWebhookList;
        }
        
        /// <summary>
        /// Pagination information for navigating through the response
        /// </summary>
        /// <value>Pagination information for navigating through the response</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public PageInfo Page { get; set; }

        /// <summary>
        /// An array of widget items
        /// </summary>
        /// <value>An array of widget items</value>
        [DataMember(Name="userWebhookList", EmitDefaultValue=false)]
        public List<UserWebhook> UserWebhookList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserWebhooks {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  UserWebhookList: ").Append(UserWebhookList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserWebhooks);
        }

        /// <summary>
        /// Returns true if UserWebhooks instances are equal
        /// </summary>
        /// <param name="input">Instance of UserWebhooks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserWebhooks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.UserWebhookList == input.UserWebhookList ||
                    this.UserWebhookList != null &&
                    this.UserWebhookList.SequenceEqual(input.UserWebhookList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.UserWebhookList != null)
                    hashCode = hashCode * 59 + this.UserWebhookList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
