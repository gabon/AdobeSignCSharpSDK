/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AdobeSign.Rest.Model.Groups
{
    /// <summary>
    /// GroupUserInfo
    /// </summary>
    [DataContract]
    public partial class GroupUserInfo :  IEquatable<GroupUserInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupUserInfo" /> class.
        /// </summary>
        /// <param name="Company">The name of company of the user.</param>
        /// <param name="Email">The email address of the user.</param>
        /// <param name="FirstName">The first name of the user.</param>
        /// <param name="Id">A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs.</param>
        /// <param name="IsGroupAdmin">True if user is group admin.</param>
        /// <param name="LastName">The last name of the user.</param>
        public GroupUserInfo(string Company = default(string), string Email = default(string), string FirstName = default(string), string Id = default(string), bool? IsGroupAdmin = default(bool?), string LastName = default(string))
        {
            this.Company = Company;
            this.Email = Email;
            this.FirstName = FirstName;
            this.Id = Id;
            this.IsGroupAdmin = IsGroupAdmin;
            this.LastName = LastName;
        }
        
        /// <summary>
        /// The name of company of the user
        /// </summary>
        /// <value>The name of company of the user</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// The email address of the user
        /// </summary>
        /// <value>The email address of the user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs
        /// </summary>
        /// <value>A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// True if user is group admin
        /// </summary>
        /// <value>True if user is group admin</value>
        [DataMember(Name="isGroupAdmin", EmitDefaultValue=false)]
        public bool? IsGroupAdmin { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupUserInfo {\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsGroupAdmin: ").Append(IsGroupAdmin).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupUserInfo);
        }

        /// <summary>
        /// Returns true if GroupUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupUserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsGroupAdmin == input.IsGroupAdmin ||
                    (this.IsGroupAdmin != null &&
                    this.IsGroupAdmin.Equals(input.IsGroupAdmin))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsGroupAdmin != null)
                    hashCode = hashCode * 59 + this.IsGroupAdmin.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
